
28_cubes_pour_le_fun.elf:     file format elf32-littlenios2
28_cubes_pour_le_fun.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002164 memsz 0x00002164 flags r-x
    LOAD off    0x00003184 vaddr 0x0000a184 paddr 0x0000a474 align 2**12
         filesz 0x000002f0 memsz 0x000002f0 flags rw-
    LOAD off    0x00003764 vaddr 0x0000a764 paddr 0x0000a764 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003474  2**0
                  CONTENTS
  2 .text         000020f0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  0000a110  0000a110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f0  0000a184  0000a474  00003184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  0000a764  0000a764  00003764  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000a77c  0000a77c  00003474  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000508  00000000  00000000  00003498  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000769c  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026df  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002bbb  00000000  00000000  0000d71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a04  00000000  00000000  000102d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017ff  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  000124db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013834  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00013848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001520a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001520d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015210  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015211  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015212  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015216  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001521a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001521e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00015229  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001523f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  00015247  2**0
                  CONTENTS, READONLY
 29 .jdi          000037b5  00000000  00000000  0001527f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004cf7e  00000000  00000000  00018a34  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000a110 l    d  .rodata	00000000 .rodata
0000a184 l    d  .rwdata	00000000 .rwdata
0000a764 l    d  .bss	00000000 .bss
0000a77c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../28_cubes_pour_le_fun_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008574 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a19c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008c74 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00008da0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008efc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000904c l     F .text	00000038 alt_dev_reg
0000a27c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
0000934c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009490 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000094bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009684 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000097dc l     F .text	00000050 alt_get_errno
0000982c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008e84 g     F .text	00000078 alt_main
000084c4 g     F .text	00000080 _puts_r
0000a474 g       *ABS*	00000000 __flash_rwdata_start
0000a184 g     O .rwdata	00000018 rows
00008478 g     F .text	0000004c printf
0000a778 g     O .bss	00000004 altera_avalon_timer_ts_freq
00009b00 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a764 g     O .bss	00000004 errno
0000a76c g     O .bss	00000004 alt_argv
00012450 g       *ABS*	00000000 _gp
0000a450 g     O .rwdata	00000004 r_size
0000a2d0 g     O .rwdata	00000180 alt_fd_list
00009b20 g     F .text	00000090 alt_find_dev
00009764 g     F .text	00000078 alt_io_redirect
0000a110 g       *ABS*	00000000 __DTOR_END__
00008544 g     F .text	00000014 puts
000091d4 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000843c g     F .text	0000003c _printf_r
00008d90 g     F .text	00000008 .hidden __udivsi3
0000a46c g     O .rwdata	00000004 alt_max_fd
0000a454 g     O .rwdata	00000004 _global_impure_ptr
0000a77c g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
0000a2a8 g     O .rwdata	00000028 alt_dev_null
00009474 g     F .text	0000001c alt_dcache_flush_all
0000a474 g       *ABS*	00000000 __ram_rwdata_end
0000a464 g     O .rwdata	00000008 alt_dev_list
00008f4c g     F .text	00000100 write
0000a184 g       *ABS*	00000000 __ram_rodata_end
00008d98 g     F .text	00000008 .hidden __umodsi3
0000a77c g       *ABS*	00000000 end
0000a110 g       *ABS*	00000000 __CTOR_LIST__
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
000092b8 g     F .text	00000094 altera_avalon_jtag_uart_write
000085e0 g     F .text	0000056c ___vfprintf_internal_r
00009f40 g     F .text	0000019c __call_exitprocs
00008020 g     F .text	0000003c _start
000090b8 g     F .text	0000005c alt_sys_init
00009dfc g     F .text	00000144 __register_exitproc
00008414 g     F .text	00000028 .hidden __mulsi3
0000a184 g       *ABS*	00000000 __ram_rwdata_start
0000a110 g       *ABS*	00000000 __ram_rodata_start
00009114 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009cc4 g     F .text	000000d4 alt_get_fd
00009dcc g     F .text	00000030 memcmp
0000a77c g       *ABS*	00000000 __alt_stack_base
00009bb0 g     F .text	00000114 alt_find_file
0000950c g     F .text	000000a4 alt_dev_llist_insert
00008b70 g     F .text	000000ac __sfvwrite_small_dev
0000a764 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000238 main
0000a770 g     O .bss	00000004 alt_envp
00009174 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a470 g     O .rwdata	00000004 alt_errno
00008ce0 g     F .text	00000054 .hidden __divsi3
0000a110 g       *ABS*	00000000 __CTOR_END__
0000a110 g       *ABS*	00000000 __flash_rodata_start
0000a110 g       *ABS*	00000000 __DTOR_LIST__
00009084 g     F .text	00000034 alt_irq_init
00009a80 g     F .text	00000080 alt_release_fd
00009d98 g     F .text	00000014 atexit
00008c1c g     F .text	00000058 _write_r
0000a458 g     O .rwdata	00000004 _impure_ptr
0000a768 g     O .bss	00000004 alt_argc
0000a774 g     O .bss	00000004 altera_avalon_timer_ts_base
0000960c g     F .text	0000005c _do_dtors
0000a45c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a474 g       *ABS*	00000000 _edata
0000a77c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009dac g     F .text	00000020 exit
00008d34 g     F .text	0000005c .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000a0dc g     F .text	00000034 _exit
00008558 g     F .text	0000001c strlen
00009920 g     F .text	00000160 open
00009668 g     F .text	0000001c alt_icache_flush_all
00008b4c g     F .text	00000024 __vfprintf_internal
00008294 g     F .text	00000180 mvmt
000095b0 g     F .text	0000005c _do_ctors
0000939c g     F .text	000000d8 close
00008e04 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6891414 	ori	gp,gp,9296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a9d914 	ori	r2,r2,42852

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e9df14 	ori	r3,r3,42876

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff5bf4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008e040 	call	8e04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008e840 	call	8e84 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff5c08>

0000805c <main>:
#include <stdio.h>
#include "io.h"
#include "system.h"

int main(void)
{
    805c:	deffe004 	addi	sp,sp,-128
    8060:	dfc01f15 	stw	ra,124(sp)
    8064:	df001e15 	stw	fp,120(sp)
    8068:	df001e04 	addi	fp,sp,120

  int enable = 1;
    806c:	00800044 	movi	r2,1
    8070:	e0bfe215 	stw	r2,-120(fp)
  int XLENGTH = 22;
    8074:	00800584 	movi	r2,22
    8078:	e0bfe315 	stw	r2,-116(fp)
  int XDIAG_DEMI = 15;
    807c:	008003c4 	movi	r2,15
    8080:	e0bfe415 	stw	r2,-112(fp)
  int YDIAG_DEMI = 22;
    8084:	00800584 	movi	r2,22
    8088:	e0bfe515 	stw	r2,-108(fp)
  int XYDIAG_DEMI = (XDIAG_DEMI << 10) | YDIAG_DEMI;
    808c:	e0bfe417 	ldw	r2,-112(fp)
    8090:	100692ba 	slli	r3,r2,10
    8094:	e0bfe517 	ldw	r2,-108(fp)
    8098:	1884b03a 	or	r2,r3,r2
    809c:	e0bfe615 	stw	r2,-104(fp)
  int RANK1_X_OFFSET = 250;
    80a0:	00803e84 	movi	r2,250
    80a4:	e0bfe715 	stw	r2,-100(fp)
  int RANK1_Y_OFFSET = 190;
    80a8:	00802f84 	movi	r2,190
    80ac:	e0bfe815 	stw	r2,-96(fp)
  int RANK1_XY_OFFSET = (RANK1_X_OFFSET << 10) | RANK1_Y_OFFSET;
    80b0:	e0bfe717 	ldw	r2,-100(fp)
    80b4:	100692ba 	slli	r3,r2,10
    80b8:	e0bfe817 	ldw	r2,-96(fp)
    80bc:	1884b03a 	or	r2,r3,r2
    80c0:	e0bfe915 	stw	r2,-92(fp)
  int QBERT_POSITION_X0 = 250;
    80c4:	00803e84 	movi	r2,250
    80c8:	e0bfea15 	stw	r2,-88(fp)
  int QBERT_POSITION_Y0 = 190;
    80cc:	00802f84 	movi	r2,190
    80d0:	e0bfeb15 	stw	r2,-84(fp)
  int QBERT_POSITION_XY0 = (QBERT_POSITION_X0 << 10) | QBERT_POSITION_Y0;
    80d4:	e0bfea17 	ldw	r2,-88(fp)
    80d8:	100692ba 	slli	r3,r2,10
    80dc:	e0bfeb17 	ldw	r2,-84(fp)
    80e0:	1884b03a 	or	r2,r3,r2
    80e4:	e0bfec15 	stw	r2,-80(fp)
  int sc_x = RANK1_X_OFFSET + 3*(XLENGTH+XDIAG_DEMI);
    80e8:	e0ffe317 	ldw	r3,-116(fp)
    80ec:	e0bfe417 	ldw	r2,-112(fp)
    80f0:	1887883a 	add	r3,r3,r2
    80f4:	1805883a 	mov	r2,r3
    80f8:	1085883a 	add	r2,r2,r2
    80fc:	10c7883a 	add	r3,r2,r3
    8100:	e0bfe717 	ldw	r2,-100(fp)
    8104:	1885883a 	add	r2,r3,r2
    8108:	e0bfed15 	stw	r2,-76(fp)
  int sc_y = RANK1_Y_OFFSET - 5*YDIAG_DEMI;
    810c:	e13fe517 	ldw	r4,-108(fp)
    8110:	017ffec4 	movi	r5,-5
    8114:	00084140 	call	8414 <__mulsi3>
    8118:	1007883a 	mov	r3,r2
    811c:	e0bfe817 	ldw	r2,-96(fp)
    8120:	1885883a 	add	r2,r3,r2
    8124:	e0bfee15 	stw	r2,-72(fp)
  int sc_xy = (sc_x << 10) | sc_y;
    8128:	e0bfed17 	ldw	r2,-76(fp)
    812c:	100692ba 	slli	r3,r2,10
    8130:	e0bfee17 	ldw	r2,-72(fp)
    8134:	1884b03a 	or	r2,r3,r2
    8138:	e0bfef15 	stw	r2,-68(fp)
  int qbert_passage = 0xFA1F;
    813c:	00be87d4 	movui	r2,64031
    8140:	e0bff015 	stw	r2,-64(fp)
  int qbert_jump = 2;
    8144:	00800084 	movi	r2,2
    8148:	e0bff115 	stw	r2,-60(fp)
  int next_qbert = 1 << 14;
    814c:	00900004 	movi	r2,16384
    8150:	e0bff215 	stw	r2,-56(fp)
  int bad_j = 0;
    8154:	e03ff315 	stw	zero,-52(fp)

  int done = 1;
    8158:	00800044 	movi	r2,1
    815c:	e0bff415 	stw	r2,-48(fp)
  int pause = 0;
    8160:	e03ff515 	stw	zero,-44(fp)
  int resume = 0;
    8164:	e03ff615 	stw	zero,-40(fp)
  int restart = 1;
    8168:	00800044 	movi	r2,1
    816c:	e0bff715 	stw	r2,-36(fp)
  int speed = 300000; // 1 : 100000
    8170:	00800174 	movhi	r2,5
    8174:	10a4f804 	addi	r2,r2,-27680
    8178:	e0bff815 	stw	r2,-32(fp)
  int test_cnt;
  int tilt_acc = 0;
    817c:	e03ff915 	stw	zero,-28(fp)
  test_cnt = IORD_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 80);
    8180:	00801404 	movi	r2,80
    8184:	10800037 	ldwio	r2,0(r2)
    8188:	e0bffa15 	stw	r2,-24(fp)
  printf("start_speed: %d \n", test_cnt);
    818c:	01000074 	movhi	r4,1
    8190:	21284404 	addi	r4,r4,-24304
    8194:	e17ffa17 	ldw	r5,-24(fp)
    8198:	00084780 	call	8478 <printf>
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 76, speed);
    819c:	00801304 	movi	r2,76
    81a0:	e0fff817 	ldw	r3,-32(fp)
    81a4:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 40, restart);
    81a8:	00800a04 	movi	r2,40
    81ac:	e0fff717 	ldw	r3,-36(fp)
    81b0:	10c00035 	stwio	r3,0(r2)
  //usleep(100000);
  //IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 40, !restart);

  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,0, enable);
    81b4:	0007883a 	mov	r3,zero
    81b8:	e0bfe217 	ldw	r2,-120(fp)
    81bc:	18800035 	stwio	r2,0(r3)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,8, XLENGTH);
    81c0:	00800204 	movi	r2,8
    81c4:	e0ffe317 	ldw	r3,-116(fp)
    81c8:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,12, XYDIAG_DEMI);
    81cc:	00800304 	movi	r2,12
    81d0:	e0ffe617 	ldw	r3,-104(fp)
    81d4:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,16, RANK1_XY_OFFSET);
    81d8:	00800404 	movi	r2,16
    81dc:	e0ffe917 	ldw	r3,-92(fp)
    81e0:	10c00035 	stwio	r3,0(r2)

  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,24, QBERT_POSITION_XY0);
    81e4:	00800604 	movi	r2,24
    81e8:	e0ffec17 	ldw	r3,-80(fp)
    81ec:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 28, qbert_jump);
    81f0:	00800704 	movi	r2,28
    81f4:	e0fff117 	ldw	r3,-60(fp)
    81f8:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE,20, qbert_passage);
    81fc:	00800504 	movi	r2,20
    8200:	e0fff017 	ldw	r3,-64(fp)
    8204:	10c00035 	stwio	r3,0(r2)

  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 32, next_qbert);
    8208:	00800804 	movi	r2,32
    820c:	e0fff217 	ldw	r3,-56(fp)
    8210:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 44, resume);
    8214:	00800b04 	movi	r2,44
    8218:	e0fff617 	ldw	r3,-40(fp)
    821c:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 48, pause);
    8220:	00800c04 	movi	r2,48
    8224:	e0fff517 	ldw	r3,-44(fp)
    8228:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 52, bad_j);
    822c:	00800d04 	movi	r2,52
    8230:	e0fff317 	ldw	r3,-52(fp)
    8234:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 56, done);
    8238:	00800e04 	movi	r2,56
    823c:	e0fff417 	ldw	r3,-48(fp)
    8240:	10c00035 	stwio	r3,0(r2)

  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 84, sc_xy);
    8244:	00801504 	movi	r2,84
    8248:	e0ffef17 	ldw	r3,-68(fp)
    824c:	10c00035 	stwio	r3,0(r2)
  IOWR_32DIRECT(NIOS_MTL_CONTROLLER_0_BASE, 100, tilt_acc);
    8250:	00801904 	movi	r2,100
    8254:	e0fff917 	ldw	r3,-28(fp)
    8258:	10c00035 	stwio	r3,0(r2)
  int dir, etc;
  int next;
  int move[2];
  int result;
  int elems, painted, pos;
  elems = 1; painted = 0;
    825c:	00800044 	movi	r2,1
    8260:	e0bffb15 	stw	r2,-20(fp)
    8264:	e03ffc15 	stw	zero,-16(fp)
  pos = 1;
    8268:	00800044 	movi	r2,1
    826c:	e0bffd15 	stw	r2,-12(fp)
//		}
 // }

*/

  printf("Move my Qbert!\n");
    8270:	01000074 	movhi	r4,1
    8274:	21284904 	addi	r4,r4,-24284
    8278:	00085440 	call	8544 <puts>


  return 0;
    827c:	0005883a 	mov	r2,zero
}
    8280:	e037883a 	mov	sp,fp
    8284:	dfc00117 	ldw	ra,4(sp)
    8288:	df000017 	ldw	fp,0(sp)
    828c:	dec00204 	addi	sp,sp,8
    8290:	f800283a 	ret

00008294 <mvmt>:

int r_size = 6;
int rows[6] = {1, 2, 4, 7, 11, 16};

int mvmt(int move[2], int init)
{
    8294:	defff804 	addi	sp,sp,-32
    8298:	dfc00715 	stw	ra,28(sp)
    829c:	df000615 	stw	fp,24(sp)
    82a0:	df000604 	addi	fp,sp,24
    82a4:	e13ffe15 	stw	r4,-8(fp)
    82a8:	e17fff15 	stw	r5,-4(fp)

   int n = 1;
    82ac:	00800044 	movi	r2,1
    82b0:	e0bffa15 	stw	r2,-24(fp)
   while(init != (1 << (n-1))){
    82b4:	00000306 	br	82c4 <mvmt+0x30>
	   n++;
    82b8:	e0bffa17 	ldw	r2,-24(fp)
    82bc:	10800044 	addi	r2,r2,1
    82c0:	e0bffa15 	stw	r2,-24(fp)

int mvmt(int move[2], int init)
{

   int n = 1;
   while(init != (1 << (n-1))){
    82c4:	e0bffa17 	ldw	r2,-24(fp)
    82c8:	10bfffc4 	addi	r2,r2,-1
    82cc:	00c00044 	movi	r3,1
    82d0:	1886983a 	sll	r3,r3,r2
    82d4:	e0bfff17 	ldw	r2,-4(fp)
    82d8:	18bff71e 	bne	r3,r2,82b8 <_gp+0xffff5e68>
	   n++;
   }
   int end;
   int k, k2;
   for(k=r_size; k>0; k--) if (n>=rows[k-1]) break;
    82dc:	d0a00017 	ldw	r2,-32768(gp)
    82e0:	e0bffc15 	stw	r2,-16(fp)
    82e4:	00000e06 	br	8320 <mvmt+0x8c>
    82e8:	e0bffc17 	ldw	r2,-16(fp)
    82ec:	10ffffc4 	addi	r3,r2,-1
    82f0:	00800074 	movhi	r2,1
    82f4:	10a86104 	addi	r2,r2,-24188
    82f8:	18c7883a 	add	r3,r3,r3
    82fc:	18c7883a 	add	r3,r3,r3
    8300:	10c5883a 	add	r2,r2,r3
    8304:	10800017 	ldw	r2,0(r2)
    8308:	e0fffa17 	ldw	r3,-24(fp)
    830c:	18800116 	blt	r3,r2,8314 <mvmt+0x80>
    8310:	00000506 	br	8328 <mvmt+0x94>
    8314:	e0bffc17 	ldw	r2,-16(fp)
    8318:	10bfffc4 	addi	r2,r2,-1
    831c:	e0bffc15 	stw	r2,-16(fp)
    8320:	e0bffc17 	ldw	r2,-16(fp)
    8324:	00bff016 	blt	zero,r2,82e8 <_gp+0xffff5e98>

   if (move[0]) end = n-(k-move[1]); //UP
    8328:	e0bffe17 	ldw	r2,-8(fp)
    832c:	10800017 	ldw	r2,0(r2)
    8330:	10000926 	beq	r2,zero,8358 <mvmt+0xc4>
    8334:	e0bffe17 	ldw	r2,-8(fp)
    8338:	10800104 	addi	r2,r2,4
    833c:	10c00017 	ldw	r3,0(r2)
    8340:	e0bffc17 	ldw	r2,-16(fp)
    8344:	1887c83a 	sub	r3,r3,r2
    8348:	e0bffa17 	ldw	r2,-24(fp)
    834c:	1885883a 	add	r2,r3,r2
    8350:	e0bffb15 	stw	r2,-20(fp)
    8354:	00000806 	br	8378 <mvmt+0xe4>
   else end = n+(k+move[1]); //DOWN
    8358:	e0bffe17 	ldw	r2,-8(fp)
    835c:	10800104 	addi	r2,r2,4
    8360:	10c00017 	ldw	r3,0(r2)
    8364:	e0bffc17 	ldw	r2,-16(fp)
    8368:	1887883a 	add	r3,r3,r2
    836c:	e0bffa17 	ldw	r2,-24(fp)
    8370:	1885883a 	add	r2,r3,r2
    8374:	e0bffb15 	stw	r2,-20(fp)

   for(k2=r_size; k2>0; k2--) if (end>=rows[k2-1]) break;
    8378:	d0a00017 	ldw	r2,-32768(gp)
    837c:	e0bffd15 	stw	r2,-12(fp)
    8380:	00000e06 	br	83bc <mvmt+0x128>
    8384:	e0bffd17 	ldw	r2,-12(fp)
    8388:	10ffffc4 	addi	r3,r2,-1
    838c:	00800074 	movhi	r2,1
    8390:	10a86104 	addi	r2,r2,-24188
    8394:	18c7883a 	add	r3,r3,r3
    8398:	18c7883a 	add	r3,r3,r3
    839c:	10c5883a 	add	r2,r2,r3
    83a0:	10800017 	ldw	r2,0(r2)
    83a4:	e0fffb17 	ldw	r3,-20(fp)
    83a8:	18800116 	blt	r3,r2,83b0 <mvmt+0x11c>
    83ac:	00000506 	br	83c4 <mvmt+0x130>
    83b0:	e0bffd17 	ldw	r2,-12(fp)
    83b4:	10bfffc4 	addi	r2,r2,-1
    83b8:	e0bffd15 	stw	r2,-12(fp)
    83bc:	e0bffd17 	ldw	r2,-12(fp)
    83c0:	00bff016 	blt	zero,r2,8384 <_gp+0xffff5f34>

   printf("move actual: %d, %d	", n, end);
    83c4:	01000074 	movhi	r4,1
    83c8:	21284d04 	addi	r4,r4,-24268
    83cc:	e17ffa17 	ldw	r5,-24(fp)
    83d0:	e1bffb17 	ldw	r6,-20(fp)
    83d4:	00084780 	call	8478 <printf>
   if (abs(k-k2)==1) return end;
    83d8:	e0fffc17 	ldw	r3,-16(fp)
    83dc:	e0bffd17 	ldw	r2,-12(fp)
    83e0:	1885c83a 	sub	r2,r3,r2
    83e4:	1000010e 	bge	r2,zero,83ec <mvmt+0x158>
    83e8:	0085c83a 	sub	r2,zero,r2
    83ec:	10800058 	cmpnei	r2,r2,1
    83f0:	1000021e 	bne	r2,zero,83fc <mvmt+0x168>
    83f4:	e0bffb17 	ldw	r2,-20(fp)
    83f8:	00000106 	br	8400 <mvmt+0x16c>
   else return init;
    83fc:	e0bfff17 	ldw	r2,-4(fp)
}
    8400:	e037883a 	mov	sp,fp
    8404:	dfc00117 	ldw	ra,4(sp)
    8408:	df000017 	ldw	fp,0(sp)
    840c:	dec00204 	addi	sp,sp,8
    8410:	f800283a 	ret

00008414 <__mulsi3>:
    8414:	0005883a 	mov	r2,zero
    8418:	20000726 	beq	r4,zero,8438 <__mulsi3+0x24>
    841c:	20c0004c 	andi	r3,r4,1
    8420:	2008d07a 	srli	r4,r4,1
    8424:	18000126 	beq	r3,zero,842c <__mulsi3+0x18>
    8428:	1145883a 	add	r2,r2,r5
    842c:	294b883a 	add	r5,r5,r5
    8430:	203ffa1e 	bne	r4,zero,841c <_gp+0xffff5fcc>
    8434:	f800283a 	ret
    8438:	f800283a 	ret

0000843c <_printf_r>:
    843c:	defffd04 	addi	sp,sp,-12
    8440:	dfc00015 	stw	ra,0(sp)
    8444:	d9800115 	stw	r6,4(sp)
    8448:	d9c00215 	stw	r7,8(sp)
    844c:	20c00217 	ldw	r3,8(r4)
    8450:	280d883a 	mov	r6,r5
    8454:	01400074 	movhi	r5,1
    8458:	2962dc04 	addi	r5,r5,-29840
    845c:	19400115 	stw	r5,4(r3)
    8460:	21400217 	ldw	r5,8(r4)
    8464:	d9c00104 	addi	r7,sp,4
    8468:	00085e00 	call	85e0 <___vfprintf_internal_r>
    846c:	dfc00017 	ldw	ra,0(sp)
    8470:	dec00304 	addi	sp,sp,12
    8474:	f800283a 	ret

00008478 <printf>:
    8478:	defffc04 	addi	sp,sp,-16
    847c:	dfc00015 	stw	ra,0(sp)
    8480:	d9400115 	stw	r5,4(sp)
    8484:	d9800215 	stw	r6,8(sp)
    8488:	d9c00315 	stw	r7,12(sp)
    848c:	00800074 	movhi	r2,1
    8490:	10a91604 	addi	r2,r2,-23464
    8494:	10800017 	ldw	r2,0(r2)
    8498:	200b883a 	mov	r5,r4
    849c:	01000074 	movhi	r4,1
    84a0:	10c00217 	ldw	r3,8(r2)
    84a4:	2122dc04 	addi	r4,r4,-29840
    84a8:	d9800104 	addi	r6,sp,4
    84ac:	19000115 	stw	r4,4(r3)
    84b0:	11000217 	ldw	r4,8(r2)
    84b4:	0008b4c0 	call	8b4c <__vfprintf_internal>
    84b8:	dfc00017 	ldw	ra,0(sp)
    84bc:	dec00404 	addi	sp,sp,16
    84c0:	f800283a 	ret

000084c4 <_puts_r>:
    84c4:	defffd04 	addi	sp,sp,-12
    84c8:	dc000015 	stw	r16,0(sp)
    84cc:	2021883a 	mov	r16,r4
    84d0:	2809883a 	mov	r4,r5
    84d4:	dfc00215 	stw	ra,8(sp)
    84d8:	dc400115 	stw	r17,4(sp)
    84dc:	2823883a 	mov	r17,r5
    84e0:	00085580 	call	8558 <strlen>
    84e4:	81400217 	ldw	r5,8(r16)
    84e8:	00c00074 	movhi	r3,1
    84ec:	18e2dc04 	addi	r3,r3,-29840
    84f0:	28c00115 	stw	r3,4(r5)
    84f4:	8009883a 	mov	r4,r16
    84f8:	880d883a 	mov	r6,r17
    84fc:	100f883a 	mov	r7,r2
    8500:	0008b700 	call	8b70 <__sfvwrite_small_dev>
    8504:	00ffffc4 	movi	r3,-1
    8508:	10c00926 	beq	r2,r3,8530 <_puts_r+0x6c>
    850c:	81400217 	ldw	r5,8(r16)
    8510:	01800074 	movhi	r6,1
    8514:	8009883a 	mov	r4,r16
    8518:	28800117 	ldw	r2,4(r5)
    851c:	31a85304 	addi	r6,r6,-24244
    8520:	01c00044 	movi	r7,1
    8524:	103ee83a 	callr	r2
    8528:	10bfffe0 	cmpeqi	r2,r2,-1
    852c:	0085c83a 	sub	r2,zero,r2
    8530:	dfc00217 	ldw	ra,8(sp)
    8534:	dc400117 	ldw	r17,4(sp)
    8538:	dc000017 	ldw	r16,0(sp)
    853c:	dec00304 	addi	sp,sp,12
    8540:	f800283a 	ret

00008544 <puts>:
    8544:	00800074 	movhi	r2,1
    8548:	10a91604 	addi	r2,r2,-23464
    854c:	200b883a 	mov	r5,r4
    8550:	11000017 	ldw	r4,0(r2)
    8554:	00084c41 	jmpi	84c4 <_puts_r>

00008558 <strlen>:
    8558:	2005883a 	mov	r2,r4
    855c:	10c00007 	ldb	r3,0(r2)
    8560:	18000226 	beq	r3,zero,856c <strlen+0x14>
    8564:	10800044 	addi	r2,r2,1
    8568:	003ffc06 	br	855c <_gp+0xffff610c>
    856c:	1105c83a 	sub	r2,r2,r4
    8570:	f800283a 	ret

00008574 <print_repeat>:
    8574:	defffb04 	addi	sp,sp,-20
    8578:	dc800315 	stw	r18,12(sp)
    857c:	dc400215 	stw	r17,8(sp)
    8580:	dc000115 	stw	r16,4(sp)
    8584:	dfc00415 	stw	ra,16(sp)
    8588:	2025883a 	mov	r18,r4
    858c:	2823883a 	mov	r17,r5
    8590:	d9800005 	stb	r6,0(sp)
    8594:	3821883a 	mov	r16,r7
    8598:	04000a0e 	bge	zero,r16,85c4 <print_repeat+0x50>
    859c:	88800117 	ldw	r2,4(r17)
    85a0:	9009883a 	mov	r4,r18
    85a4:	880b883a 	mov	r5,r17
    85a8:	d80d883a 	mov	r6,sp
    85ac:	01c00044 	movi	r7,1
    85b0:	103ee83a 	callr	r2
    85b4:	843fffc4 	addi	r16,r16,-1
    85b8:	103ff726 	beq	r2,zero,8598 <_gp+0xffff6148>
    85bc:	00bfffc4 	movi	r2,-1
    85c0:	00000106 	br	85c8 <print_repeat+0x54>
    85c4:	0005883a 	mov	r2,zero
    85c8:	dfc00417 	ldw	ra,16(sp)
    85cc:	dc800317 	ldw	r18,12(sp)
    85d0:	dc400217 	ldw	r17,8(sp)
    85d4:	dc000117 	ldw	r16,4(sp)
    85d8:	dec00504 	addi	sp,sp,20
    85dc:	f800283a 	ret

000085e0 <___vfprintf_internal_r>:
    85e0:	deffe304 	addi	sp,sp,-116
    85e4:	d8c00804 	addi	r3,sp,32
    85e8:	df001b15 	stw	fp,108(sp)
    85ec:	ddc01a15 	stw	r23,104(sp)
    85f0:	dd801915 	stw	r22,100(sp)
    85f4:	dd401815 	stw	r21,96(sp)
    85f8:	dd001715 	stw	r20,92(sp)
    85fc:	dcc01615 	stw	r19,88(sp)
    8600:	dc801515 	stw	r18,84(sp)
    8604:	dc401415 	stw	r17,80(sp)
    8608:	dc001315 	stw	r16,76(sp)
    860c:	dfc01c15 	stw	ra,112(sp)
    8610:	2029883a 	mov	r20,r4
    8614:	2823883a 	mov	r17,r5
    8618:	3839883a 	mov	fp,r7
    861c:	d9800f15 	stw	r6,60(sp)
    8620:	0021883a 	mov	r16,zero
    8624:	d8000e15 	stw	zero,56(sp)
    8628:	002f883a 	mov	r23,zero
    862c:	002b883a 	mov	r21,zero
    8630:	0027883a 	mov	r19,zero
    8634:	0025883a 	mov	r18,zero
    8638:	d8000c15 	stw	zero,48(sp)
    863c:	d8000b15 	stw	zero,44(sp)
    8640:	002d883a 	mov	r22,zero
    8644:	d8c00915 	stw	r3,36(sp)
    8648:	d8c00f17 	ldw	r3,60(sp)
    864c:	19000003 	ldbu	r4,0(r3)
    8650:	20803fcc 	andi	r2,r4,255
    8654:	1080201c 	xori	r2,r2,128
    8658:	10bfe004 	addi	r2,r2,-128
    865c:	10012e26 	beq	r2,zero,8b18 <___vfprintf_internal_r+0x538>
    8660:	01400044 	movi	r5,1
    8664:	b1401426 	beq	r22,r5,86b8 <___vfprintf_internal_r+0xd8>
    8668:	2d800216 	blt	r5,r22,8674 <___vfprintf_internal_r+0x94>
    866c:	b0000626 	beq	r22,zero,8688 <___vfprintf_internal_r+0xa8>
    8670:	00012506 	br	8b08 <___vfprintf_internal_r+0x528>
    8674:	01400084 	movi	r5,2
    8678:	b1401d26 	beq	r22,r5,86f0 <___vfprintf_internal_r+0x110>
    867c:	014000c4 	movi	r5,3
    8680:	b1402b26 	beq	r22,r5,8730 <___vfprintf_internal_r+0x150>
    8684:	00012006 	br	8b08 <___vfprintf_internal_r+0x528>
    8688:	01400944 	movi	r5,37
    868c:	11410d26 	beq	r2,r5,8ac4 <___vfprintf_internal_r+0x4e4>
    8690:	88800117 	ldw	r2,4(r17)
    8694:	d9000005 	stb	r4,0(sp)
    8698:	880b883a 	mov	r5,r17
    869c:	a009883a 	mov	r4,r20
    86a0:	d80d883a 	mov	r6,sp
    86a4:	01c00044 	movi	r7,1
    86a8:	103ee83a 	callr	r2
    86ac:	1000e81e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    86b0:	84000044 	addi	r16,r16,1
    86b4:	00011406 	br	8b08 <___vfprintf_internal_r+0x528>
    86b8:	01400c04 	movi	r5,48
    86bc:	11410a26 	beq	r2,r5,8ae8 <___vfprintf_internal_r+0x508>
    86c0:	01400944 	movi	r5,37
    86c4:	11400a1e 	bne	r2,r5,86f0 <___vfprintf_internal_r+0x110>
    86c8:	d8800005 	stb	r2,0(sp)
    86cc:	88800117 	ldw	r2,4(r17)
    86d0:	a009883a 	mov	r4,r20
    86d4:	880b883a 	mov	r5,r17
    86d8:	d80d883a 	mov	r6,sp
    86dc:	b00f883a 	mov	r7,r22
    86e0:	103ee83a 	callr	r2
    86e4:	1000da1e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    86e8:	84000044 	addi	r16,r16,1
    86ec:	00010506 	br	8b04 <___vfprintf_internal_r+0x524>
    86f0:	25bff404 	addi	r22,r4,-48
    86f4:	b5803fcc 	andi	r22,r22,255
    86f8:	00c00244 	movi	r3,9
    86fc:	1d800936 	bltu	r3,r22,8724 <___vfprintf_internal_r+0x144>
    8700:	00bfffc4 	movi	r2,-1
    8704:	90800426 	beq	r18,r2,8718 <___vfprintf_internal_r+0x138>
    8708:	9009883a 	mov	r4,r18
    870c:	01400284 	movi	r5,10
    8710:	00084140 	call	8414 <__mulsi3>
    8714:	00000106 	br	871c <___vfprintf_internal_r+0x13c>
    8718:	0005883a 	mov	r2,zero
    871c:	15a5883a 	add	r18,r2,r22
    8720:	0000f206 	br	8aec <___vfprintf_internal_r+0x50c>
    8724:	01400b84 	movi	r5,46
    8728:	1140f426 	beq	r2,r5,8afc <___vfprintf_internal_r+0x51c>
    872c:	05800084 	movi	r22,2
    8730:	213ff404 	addi	r4,r4,-48
    8734:	20c03fcc 	andi	r3,r4,255
    8738:	01000244 	movi	r4,9
    873c:	20c00b36 	bltu	r4,r3,876c <___vfprintf_internal_r+0x18c>
    8740:	00bfffc4 	movi	r2,-1
    8744:	98800626 	beq	r19,r2,8760 <___vfprintf_internal_r+0x180>
    8748:	9809883a 	mov	r4,r19
    874c:	01400284 	movi	r5,10
    8750:	d8c01115 	stw	r3,68(sp)
    8754:	00084140 	call	8414 <__mulsi3>
    8758:	d8c01117 	ldw	r3,68(sp)
    875c:	00000106 	br	8764 <___vfprintf_internal_r+0x184>
    8760:	0005883a 	mov	r2,zero
    8764:	10e7883a 	add	r19,r2,r3
    8768:	0000e706 	br	8b08 <___vfprintf_internal_r+0x528>
    876c:	01401b04 	movi	r5,108
    8770:	1140e026 	beq	r2,r5,8af4 <___vfprintf_internal_r+0x514>
    8774:	013fffc4 	movi	r4,-1
    8778:	99000226 	beq	r19,r4,8784 <___vfprintf_internal_r+0x1a4>
    877c:	d8000b15 	stw	zero,44(sp)
    8780:	00000106 	br	8788 <___vfprintf_internal_r+0x1a8>
    8784:	04c00044 	movi	r19,1
    8788:	01001a44 	movi	r4,105
    878c:	11001626 	beq	r2,r4,87e8 <___vfprintf_internal_r+0x208>
    8790:	20800916 	blt	r4,r2,87b8 <___vfprintf_internal_r+0x1d8>
    8794:	010018c4 	movi	r4,99
    8798:	11009626 	beq	r2,r4,89f4 <___vfprintf_internal_r+0x414>
    879c:	01001904 	movi	r4,100
    87a0:	11001126 	beq	r2,r4,87e8 <___vfprintf_internal_r+0x208>
    87a4:	01001604 	movi	r4,88
    87a8:	1100d61e 	bne	r2,r4,8b04 <___vfprintf_internal_r+0x524>
    87ac:	00c00044 	movi	r3,1
    87b0:	d8c00e15 	stw	r3,56(sp)
    87b4:	00001406 	br	8808 <___vfprintf_internal_r+0x228>
    87b8:	01001cc4 	movi	r4,115
    87bc:	1100a626 	beq	r2,r4,8a58 <___vfprintf_internal_r+0x478>
    87c0:	20800416 	blt	r4,r2,87d4 <___vfprintf_internal_r+0x1f4>
    87c4:	01001bc4 	movi	r4,111
    87c8:	1100ce1e 	bne	r2,r4,8b04 <___vfprintf_internal_r+0x524>
    87cc:	05400204 	movi	r21,8
    87d0:	00000e06 	br	880c <___vfprintf_internal_r+0x22c>
    87d4:	01001d44 	movi	r4,117
    87d8:	11000c26 	beq	r2,r4,880c <___vfprintf_internal_r+0x22c>
    87dc:	01001e04 	movi	r4,120
    87e0:	11000926 	beq	r2,r4,8808 <___vfprintf_internal_r+0x228>
    87e4:	0000c706 	br	8b04 <___vfprintf_internal_r+0x524>
    87e8:	e0800104 	addi	r2,fp,4
    87ec:	b8000726 	beq	r23,zero,880c <___vfprintf_internal_r+0x22c>
    87f0:	d8800d15 	stw	r2,52(sp)
    87f4:	e7000017 	ldw	fp,0(fp)
    87f8:	e000080e 	bge	fp,zero,881c <___vfprintf_internal_r+0x23c>
    87fc:	0739c83a 	sub	fp,zero,fp
    8800:	02000044 	movi	r8,1
    8804:	00000606 	br	8820 <___vfprintf_internal_r+0x240>
    8808:	05400404 	movi	r21,16
    880c:	e0c00104 	addi	r3,fp,4
    8810:	d8c00d15 	stw	r3,52(sp)
    8814:	e7000017 	ldw	fp,0(fp)
    8818:	002f883a 	mov	r23,zero
    881c:	0011883a 	mov	r8,zero
    8820:	002d883a 	mov	r22,zero
    8824:	dd87883a 	add	r3,sp,r22
    8828:	e0001a26 	beq	fp,zero,8894 <___vfprintf_internal_r+0x2b4>
    882c:	e009883a 	mov	r4,fp
    8830:	a80b883a 	mov	r5,r21
    8834:	d8c01115 	stw	r3,68(sp)
    8838:	da001215 	stw	r8,72(sp)
    883c:	0008d900 	call	8d90 <__udivsi3>
    8840:	a809883a 	mov	r4,r21
    8844:	100b883a 	mov	r5,r2
    8848:	d8801015 	stw	r2,64(sp)
    884c:	00084140 	call	8414 <__mulsi3>
    8850:	e085c83a 	sub	r2,fp,r2
    8854:	01000244 	movi	r4,9
    8858:	d8c01117 	ldw	r3,68(sp)
    885c:	d9801017 	ldw	r6,64(sp)
    8860:	da001217 	ldw	r8,72(sp)
    8864:	20800216 	blt	r4,r2,8870 <___vfprintf_internal_r+0x290>
    8868:	17000c04 	addi	fp,r2,48
    886c:	00000506 	br	8884 <___vfprintf_internal_r+0x2a4>
    8870:	d9400e17 	ldw	r5,56(sp)
    8874:	28000226 	beq	r5,zero,8880 <___vfprintf_internal_r+0x2a0>
    8878:	17000dc4 	addi	fp,r2,55
    887c:	00000106 	br	8884 <___vfprintf_internal_r+0x2a4>
    8880:	170015c4 	addi	fp,r2,87
    8884:	1f000005 	stb	fp,0(r3)
    8888:	b5800044 	addi	r22,r22,1
    888c:	3039883a 	mov	fp,r6
    8890:	003fe406 	br	8824 <_gp+0xffff63d4>
    8894:	1ec5c83a 	sub	r2,r3,sp
    8898:	d8800a15 	stw	r2,40(sp)
    889c:	9885c83a 	sub	r2,r19,r2
    88a0:	1839883a 	mov	fp,r3
    88a4:	00800e0e 	bge	zero,r2,88e0 <___vfprintf_internal_r+0x300>
    88a8:	182d883a 	mov	r22,r3
    88ac:	1885883a 	add	r2,r3,r2
    88b0:	01000c04 	movi	r4,48
    88b4:	d9400917 	ldw	r5,36(sp)
    88b8:	b007883a 	mov	r3,r22
    88bc:	b140052e 	bgeu	r22,r5,88d4 <___vfprintf_internal_r+0x2f4>
    88c0:	b5800044 	addi	r22,r22,1
    88c4:	19000005 	stb	r4,0(r3)
    88c8:	b039883a 	mov	fp,r22
    88cc:	b0bff91e 	bne	r22,r2,88b4 <_gp+0xffff6464>
    88d0:	00000106 	br	88d8 <___vfprintf_internal_r+0x2f8>
    88d4:	b039883a 	mov	fp,r22
    88d8:	b6edc83a 	sub	r22,r22,sp
    88dc:	dd800a15 	stw	r22,40(sp)
    88e0:	d8800a17 	ldw	r2,40(sp)
    88e4:	1207883a 	add	r3,r2,r8
    88e8:	90edc83a 	sub	r22,r18,r3
    88ec:	d8c00b17 	ldw	r3,44(sp)
    88f0:	18001726 	beq	r3,zero,8950 <___vfprintf_internal_r+0x370>
    88f4:	40000a26 	beq	r8,zero,8920 <___vfprintf_internal_r+0x340>
    88f8:	00800b44 	movi	r2,45
    88fc:	d8800805 	stb	r2,32(sp)
    8900:	88800117 	ldw	r2,4(r17)
    8904:	a009883a 	mov	r4,r20
    8908:	880b883a 	mov	r5,r17
    890c:	d9800804 	addi	r6,sp,32
    8910:	01c00044 	movi	r7,1
    8914:	103ee83a 	callr	r2
    8918:	10004d1e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    891c:	84000044 	addi	r16,r16,1
    8920:	0580070e 	bge	zero,r22,8940 <___vfprintf_internal_r+0x360>
    8924:	a009883a 	mov	r4,r20
    8928:	880b883a 	mov	r5,r17
    892c:	01800c04 	movi	r6,48
    8930:	b00f883a 	mov	r7,r22
    8934:	00085740 	call	8574 <print_repeat>
    8938:	1000451e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    893c:	85a1883a 	add	r16,r16,r22
    8940:	d9000a17 	ldw	r4,40(sp)
    8944:	e007883a 	mov	r3,fp
    8948:	272dc83a 	sub	r22,r4,fp
    894c:	00002206 	br	89d8 <___vfprintf_internal_r+0x3f8>
    8950:	0580090e 	bge	zero,r22,8978 <___vfprintf_internal_r+0x398>
    8954:	a009883a 	mov	r4,r20
    8958:	880b883a 	mov	r5,r17
    895c:	01800804 	movi	r6,32
    8960:	b00f883a 	mov	r7,r22
    8964:	da001215 	stw	r8,72(sp)
    8968:	00085740 	call	8574 <print_repeat>
    896c:	da001217 	ldw	r8,72(sp)
    8970:	1000371e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    8974:	85a1883a 	add	r16,r16,r22
    8978:	403ff126 	beq	r8,zero,8940 <_gp+0xffff64f0>
    897c:	00800b44 	movi	r2,45
    8980:	d8800805 	stb	r2,32(sp)
    8984:	88800117 	ldw	r2,4(r17)
    8988:	a009883a 	mov	r4,r20
    898c:	880b883a 	mov	r5,r17
    8990:	d9800804 	addi	r6,sp,32
    8994:	01c00044 	movi	r7,1
    8998:	103ee83a 	callr	r2
    899c:	10002c1e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    89a0:	84000044 	addi	r16,r16,1
    89a4:	003fe606 	br	8940 <_gp+0xffff64f0>
    89a8:	18ffffc4 	addi	r3,r3,-1
    89ac:	18800003 	ldbu	r2,0(r3)
    89b0:	a009883a 	mov	r4,r20
    89b4:	d8c01115 	stw	r3,68(sp)
    89b8:	d8800805 	stb	r2,32(sp)
    89bc:	88800117 	ldw	r2,4(r17)
    89c0:	880b883a 	mov	r5,r17
    89c4:	d9800804 	addi	r6,sp,32
    89c8:	01c00044 	movi	r7,1
    89cc:	103ee83a 	callr	r2
    89d0:	d8c01117 	ldw	r3,68(sp)
    89d4:	10001e1e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    89d8:	80c5c83a 	sub	r2,r16,r3
    89dc:	1d89883a 	add	r4,r3,r22
    89e0:	e085883a 	add	r2,fp,r2
    89e4:	013ff016 	blt	zero,r4,89a8 <_gp+0xffff6558>
    89e8:	1021883a 	mov	r16,r2
    89ec:	df000d17 	ldw	fp,52(sp)
    89f0:	00004406 	br	8b04 <___vfprintf_internal_r+0x524>
    89f4:	01000044 	movi	r4,1
    89f8:	2480080e 	bge	r4,r18,8a1c <___vfprintf_internal_r+0x43c>
    89fc:	95bfffc4 	addi	r22,r18,-1
    8a00:	a009883a 	mov	r4,r20
    8a04:	880b883a 	mov	r5,r17
    8a08:	01800804 	movi	r6,32
    8a0c:	b00f883a 	mov	r7,r22
    8a10:	00085740 	call	8574 <print_repeat>
    8a14:	10000e1e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    8a18:	85a1883a 	add	r16,r16,r22
    8a1c:	e0800017 	ldw	r2,0(fp)
    8a20:	a009883a 	mov	r4,r20
    8a24:	880b883a 	mov	r5,r17
    8a28:	d8800005 	stb	r2,0(sp)
    8a2c:	88800117 	ldw	r2,4(r17)
    8a30:	d80d883a 	mov	r6,sp
    8a34:	01c00044 	movi	r7,1
    8a38:	e5800104 	addi	r22,fp,4
    8a3c:	103ee83a 	callr	r2
    8a40:	1000031e 	bne	r2,zero,8a50 <___vfprintf_internal_r+0x470>
    8a44:	84000044 	addi	r16,r16,1
    8a48:	b039883a 	mov	fp,r22
    8a4c:	00002d06 	br	8b04 <___vfprintf_internal_r+0x524>
    8a50:	00bfffc4 	movi	r2,-1
    8a54:	00003106 	br	8b1c <___vfprintf_internal_r+0x53c>
    8a58:	e5800017 	ldw	r22,0(fp)
    8a5c:	e0c00104 	addi	r3,fp,4
    8a60:	d8c00a15 	stw	r3,40(sp)
    8a64:	b009883a 	mov	r4,r22
    8a68:	00085580 	call	8558 <strlen>
    8a6c:	9091c83a 	sub	r8,r18,r2
    8a70:	1039883a 	mov	fp,r2
    8a74:	0200090e 	bge	zero,r8,8a9c <___vfprintf_internal_r+0x4bc>
    8a78:	400f883a 	mov	r7,r8
    8a7c:	a009883a 	mov	r4,r20
    8a80:	880b883a 	mov	r5,r17
    8a84:	01800804 	movi	r6,32
    8a88:	da001215 	stw	r8,72(sp)
    8a8c:	00085740 	call	8574 <print_repeat>
    8a90:	da001217 	ldw	r8,72(sp)
    8a94:	103fee1e 	bne	r2,zero,8a50 <_gp+0xffff6600>
    8a98:	8221883a 	add	r16,r16,r8
    8a9c:	88800117 	ldw	r2,4(r17)
    8aa0:	a009883a 	mov	r4,r20
    8aa4:	880b883a 	mov	r5,r17
    8aa8:	b00d883a 	mov	r6,r22
    8aac:	e00f883a 	mov	r7,fp
    8ab0:	103ee83a 	callr	r2
    8ab4:	103fe61e 	bne	r2,zero,8a50 <_gp+0xffff6600>
    8ab8:	8721883a 	add	r16,r16,fp
    8abc:	df000a17 	ldw	fp,40(sp)
    8ac0:	00001006 	br	8b04 <___vfprintf_internal_r+0x524>
    8ac4:	05c00044 	movi	r23,1
    8ac8:	04ffffc4 	movi	r19,-1
    8acc:	d8000e15 	stw	zero,56(sp)
    8ad0:	05400284 	movi	r21,10
    8ad4:	9825883a 	mov	r18,r19
    8ad8:	d8000c15 	stw	zero,48(sp)
    8adc:	d8000b15 	stw	zero,44(sp)
    8ae0:	b82d883a 	mov	r22,r23
    8ae4:	00000806 	br	8b08 <___vfprintf_internal_r+0x528>
    8ae8:	dd800b15 	stw	r22,44(sp)
    8aec:	05800084 	movi	r22,2
    8af0:	00000506 	br	8b08 <___vfprintf_internal_r+0x528>
    8af4:	00c00044 	movi	r3,1
    8af8:	d8c00c15 	stw	r3,48(sp)
    8afc:	058000c4 	movi	r22,3
    8b00:	00000106 	br	8b08 <___vfprintf_internal_r+0x528>
    8b04:	002d883a 	mov	r22,zero
    8b08:	d8c00f17 	ldw	r3,60(sp)
    8b0c:	18c00044 	addi	r3,r3,1
    8b10:	d8c00f15 	stw	r3,60(sp)
    8b14:	003ecc06 	br	8648 <_gp+0xffff61f8>
    8b18:	8005883a 	mov	r2,r16
    8b1c:	dfc01c17 	ldw	ra,112(sp)
    8b20:	df001b17 	ldw	fp,108(sp)
    8b24:	ddc01a17 	ldw	r23,104(sp)
    8b28:	dd801917 	ldw	r22,100(sp)
    8b2c:	dd401817 	ldw	r21,96(sp)
    8b30:	dd001717 	ldw	r20,92(sp)
    8b34:	dcc01617 	ldw	r19,88(sp)
    8b38:	dc801517 	ldw	r18,84(sp)
    8b3c:	dc401417 	ldw	r17,80(sp)
    8b40:	dc001317 	ldw	r16,76(sp)
    8b44:	dec01d04 	addi	sp,sp,116
    8b48:	f800283a 	ret

00008b4c <__vfprintf_internal>:
    8b4c:	2007883a 	mov	r3,r4
    8b50:	01000074 	movhi	r4,1
    8b54:	21291604 	addi	r4,r4,-23464
    8b58:	21000017 	ldw	r4,0(r4)
    8b5c:	2805883a 	mov	r2,r5
    8b60:	300f883a 	mov	r7,r6
    8b64:	180b883a 	mov	r5,r3
    8b68:	100d883a 	mov	r6,r2
    8b6c:	00085e01 	jmpi	85e0 <___vfprintf_internal_r>

00008b70 <__sfvwrite_small_dev>:
    8b70:	2880000b 	ldhu	r2,0(r5)
    8b74:	defffa04 	addi	sp,sp,-24
    8b78:	dc000015 	stw	r16,0(sp)
    8b7c:	dfc00515 	stw	ra,20(sp)
    8b80:	dd000415 	stw	r20,16(sp)
    8b84:	dcc00315 	stw	r19,12(sp)
    8b88:	dc800215 	stw	r18,8(sp)
    8b8c:	dc400115 	stw	r17,4(sp)
    8b90:	1080020c 	andi	r2,r2,8
    8b94:	2821883a 	mov	r16,r5
    8b98:	10001726 	beq	r2,zero,8bf8 <__sfvwrite_small_dev+0x88>
    8b9c:	2880008f 	ldh	r2,2(r5)
    8ba0:	10001216 	blt	r2,zero,8bec <__sfvwrite_small_dev+0x7c>
    8ba4:	2027883a 	mov	r19,r4
    8ba8:	3025883a 	mov	r18,r6
    8bac:	3823883a 	mov	r17,r7
    8bb0:	05010004 	movi	r20,1024
    8bb4:	04400b0e 	bge	zero,r17,8be4 <__sfvwrite_small_dev+0x74>
    8bb8:	8140008f 	ldh	r5,2(r16)
    8bbc:	880f883a 	mov	r7,r17
    8bc0:	a440010e 	bge	r20,r17,8bc8 <__sfvwrite_small_dev+0x58>
    8bc4:	01c10004 	movi	r7,1024
    8bc8:	9809883a 	mov	r4,r19
    8bcc:	900d883a 	mov	r6,r18
    8bd0:	0008c1c0 	call	8c1c <_write_r>
    8bd4:	0080050e 	bge	zero,r2,8bec <__sfvwrite_small_dev+0x7c>
    8bd8:	88a3c83a 	sub	r17,r17,r2
    8bdc:	90a5883a 	add	r18,r18,r2
    8be0:	003ff406 	br	8bb4 <_gp+0xffff6764>
    8be4:	0005883a 	mov	r2,zero
    8be8:	00000406 	br	8bfc <__sfvwrite_small_dev+0x8c>
    8bec:	8080000b 	ldhu	r2,0(r16)
    8bf0:	10801014 	ori	r2,r2,64
    8bf4:	8080000d 	sth	r2,0(r16)
    8bf8:	00bfffc4 	movi	r2,-1
    8bfc:	dfc00517 	ldw	ra,20(sp)
    8c00:	dd000417 	ldw	r20,16(sp)
    8c04:	dcc00317 	ldw	r19,12(sp)
    8c08:	dc800217 	ldw	r18,8(sp)
    8c0c:	dc400117 	ldw	r17,4(sp)
    8c10:	dc000017 	ldw	r16,0(sp)
    8c14:	dec00604 	addi	sp,sp,24
    8c18:	f800283a 	ret

00008c1c <_write_r>:
    8c1c:	defffd04 	addi	sp,sp,-12
    8c20:	dc000015 	stw	r16,0(sp)
    8c24:	04000074 	movhi	r16,1
    8c28:	dc400115 	stw	r17,4(sp)
    8c2c:	8429d904 	addi	r16,r16,-22684
    8c30:	2023883a 	mov	r17,r4
    8c34:	2809883a 	mov	r4,r5
    8c38:	300b883a 	mov	r5,r6
    8c3c:	380d883a 	mov	r6,r7
    8c40:	dfc00215 	stw	ra,8(sp)
    8c44:	80000015 	stw	zero,0(r16)
    8c48:	0008f4c0 	call	8f4c <write>
    8c4c:	00ffffc4 	movi	r3,-1
    8c50:	10c0031e 	bne	r2,r3,8c60 <_write_r+0x44>
    8c54:	80c00017 	ldw	r3,0(r16)
    8c58:	18000126 	beq	r3,zero,8c60 <_write_r+0x44>
    8c5c:	88c00015 	stw	r3,0(r17)
    8c60:	dfc00217 	ldw	ra,8(sp)
    8c64:	dc400117 	ldw	r17,4(sp)
    8c68:	dc000017 	ldw	r16,0(sp)
    8c6c:	dec00304 	addi	sp,sp,12
    8c70:	f800283a 	ret

00008c74 <udivmodsi4>:
    8c74:	2900182e 	bgeu	r5,r4,8cd8 <udivmodsi4+0x64>
    8c78:	28001716 	blt	r5,zero,8cd8 <udivmodsi4+0x64>
    8c7c:	00800804 	movi	r2,32
    8c80:	00c00044 	movi	r3,1
    8c84:	00000206 	br	8c90 <udivmodsi4+0x1c>
    8c88:	10001126 	beq	r2,zero,8cd0 <udivmodsi4+0x5c>
    8c8c:	28000516 	blt	r5,zero,8ca4 <udivmodsi4+0x30>
    8c90:	294b883a 	add	r5,r5,r5
    8c94:	10bfffc4 	addi	r2,r2,-1
    8c98:	18c7883a 	add	r3,r3,r3
    8c9c:	293ffa36 	bltu	r5,r4,8c88 <_gp+0xffff6838>
    8ca0:	18000b26 	beq	r3,zero,8cd0 <udivmodsi4+0x5c>
    8ca4:	0005883a 	mov	r2,zero
    8ca8:	21400236 	bltu	r4,r5,8cb4 <udivmodsi4+0x40>
    8cac:	2149c83a 	sub	r4,r4,r5
    8cb0:	10c4b03a 	or	r2,r2,r3
    8cb4:	1806d07a 	srli	r3,r3,1
    8cb8:	280ad07a 	srli	r5,r5,1
    8cbc:	183ffa1e 	bne	r3,zero,8ca8 <_gp+0xffff6858>
    8cc0:	3000011e 	bne	r6,zero,8cc8 <udivmodsi4+0x54>
    8cc4:	f800283a 	ret
    8cc8:	2005883a 	mov	r2,r4
    8ccc:	f800283a 	ret
    8cd0:	0005883a 	mov	r2,zero
    8cd4:	003ffa06 	br	8cc0 <_gp+0xffff6870>
    8cd8:	00c00044 	movi	r3,1
    8cdc:	003ff106 	br	8ca4 <_gp+0xffff6854>

00008ce0 <__divsi3>:
    8ce0:	defffe04 	addi	sp,sp,-8
    8ce4:	dfc00115 	stw	ra,4(sp)
    8ce8:	dc000015 	stw	r16,0(sp)
    8cec:	20000b16 	blt	r4,zero,8d1c <__divsi3+0x3c>
    8cf0:	0021883a 	mov	r16,zero
    8cf4:	28000c16 	blt	r5,zero,8d28 <__divsi3+0x48>
    8cf8:	000d883a 	mov	r6,zero
    8cfc:	0008c740 	call	8c74 <udivmodsi4>
    8d00:	0407c83a 	sub	r3,zero,r16
    8d04:	1884f03a 	xor	r2,r3,r2
    8d08:	1405883a 	add	r2,r2,r16
    8d0c:	dfc00117 	ldw	ra,4(sp)
    8d10:	dc000017 	ldw	r16,0(sp)
    8d14:	dec00204 	addi	sp,sp,8
    8d18:	f800283a 	ret
    8d1c:	0109c83a 	sub	r4,zero,r4
    8d20:	04000044 	movi	r16,1
    8d24:	283ff40e 	bge	r5,zero,8cf8 <_gp+0xffff68a8>
    8d28:	014bc83a 	sub	r5,zero,r5
    8d2c:	8400005c 	xori	r16,r16,1
    8d30:	003ff106 	br	8cf8 <_gp+0xffff68a8>

00008d34 <__modsi3>:
    8d34:	defffd04 	addi	sp,sp,-12
    8d38:	dfc00215 	stw	ra,8(sp)
    8d3c:	dc400115 	stw	r17,4(sp)
    8d40:	dc000015 	stw	r16,0(sp)
    8d44:	20000c16 	blt	r4,zero,8d78 <__modsi3+0x44>
    8d48:	0023883a 	mov	r17,zero
    8d4c:	0021883a 	mov	r16,zero
    8d50:	28000d16 	blt	r5,zero,8d88 <__modsi3+0x54>
    8d54:	01800044 	movi	r6,1
    8d58:	0008c740 	call	8c74 <udivmodsi4>
    8d5c:	1404f03a 	xor	r2,r2,r16
    8d60:	8885883a 	add	r2,r17,r2
    8d64:	dfc00217 	ldw	ra,8(sp)
    8d68:	dc400117 	ldw	r17,4(sp)
    8d6c:	dc000017 	ldw	r16,0(sp)
    8d70:	dec00304 	addi	sp,sp,12
    8d74:	f800283a 	ret
    8d78:	0109c83a 	sub	r4,zero,r4
    8d7c:	04400044 	movi	r17,1
    8d80:	043fffc4 	movi	r16,-1
    8d84:	283ff30e 	bge	r5,zero,8d54 <_gp+0xffff6904>
    8d88:	014bc83a 	sub	r5,zero,r5
    8d8c:	003ff106 	br	8d54 <_gp+0xffff6904>

00008d90 <__udivsi3>:
    8d90:	000d883a 	mov	r6,zero
    8d94:	0008c741 	jmpi	8c74 <udivmodsi4>

00008d98 <__umodsi3>:
    8d98:	01800044 	movi	r6,1
    8d9c:	0008c741 	jmpi	8c74 <udivmodsi4>

00008da0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8da0:	defffc04 	addi	sp,sp,-16
    8da4:	df000315 	stw	fp,12(sp)
    8da8:	df000304 	addi	fp,sp,12
    8dac:	e13ffd15 	stw	r4,-12(fp)
    8db0:	e17ffe15 	stw	r5,-8(fp)
    8db4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8db8:	e0fffe17 	ldw	r3,-8(fp)
    8dbc:	e0bffd17 	ldw	r2,-12(fp)
    8dc0:	18800c26 	beq	r3,r2,8df4 <alt_load_section+0x54>
  {
    while( to != end )
    8dc4:	00000806 	br	8de8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8dc8:	e0bffe17 	ldw	r2,-8(fp)
    8dcc:	10c00104 	addi	r3,r2,4
    8dd0:	e0fffe15 	stw	r3,-8(fp)
    8dd4:	e0fffd17 	ldw	r3,-12(fp)
    8dd8:	19000104 	addi	r4,r3,4
    8ddc:	e13ffd15 	stw	r4,-12(fp)
    8de0:	18c00017 	ldw	r3,0(r3)
    8de4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8de8:	e0fffe17 	ldw	r3,-8(fp)
    8dec:	e0bfff17 	ldw	r2,-4(fp)
    8df0:	18bff51e 	bne	r3,r2,8dc8 <_gp+0xffff6978>
    {
      *to++ = *from++;
    }
  }
}
    8df4:	e037883a 	mov	sp,fp
    8df8:	df000017 	ldw	fp,0(sp)
    8dfc:	dec00104 	addi	sp,sp,4
    8e00:	f800283a 	ret

00008e04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e04:	defffe04 	addi	sp,sp,-8
    8e08:	dfc00115 	stw	ra,4(sp)
    8e0c:	df000015 	stw	fp,0(sp)
    8e10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8e14:	01000074 	movhi	r4,1
    8e18:	21291d04 	addi	r4,r4,-23436
    8e1c:	01400074 	movhi	r5,1
    8e20:	29686104 	addi	r5,r5,-24188
    8e24:	01800074 	movhi	r6,1
    8e28:	31a91d04 	addi	r6,r6,-23436
    8e2c:	0008da00 	call	8da0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8e30:	01000074 	movhi	r4,1
    8e34:	21200804 	addi	r4,r4,-32736
    8e38:	01400074 	movhi	r5,1
    8e3c:	29600804 	addi	r5,r5,-32736
    8e40:	01800074 	movhi	r6,1
    8e44:	31a00804 	addi	r6,r6,-32736
    8e48:	0008da00 	call	8da0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8e4c:	01000074 	movhi	r4,1
    8e50:	21284404 	addi	r4,r4,-24304
    8e54:	01400074 	movhi	r5,1
    8e58:	29684404 	addi	r5,r5,-24304
    8e5c:	01800074 	movhi	r6,1
    8e60:	31a86104 	addi	r6,r6,-24188
    8e64:	0008da00 	call	8da0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8e68:	00094740 	call	9474 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8e6c:	00096680 	call	9668 <alt_icache_flush_all>
}
    8e70:	e037883a 	mov	sp,fp
    8e74:	dfc00117 	ldw	ra,4(sp)
    8e78:	df000017 	ldw	fp,0(sp)
    8e7c:	dec00204 	addi	sp,sp,8
    8e80:	f800283a 	ret

00008e84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e84:	defffd04 	addi	sp,sp,-12
    8e88:	dfc00215 	stw	ra,8(sp)
    8e8c:	df000115 	stw	fp,4(sp)
    8e90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e94:	0009883a 	mov	r4,zero
    8e98:	00090840 	call	9084 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8e9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ea0:	00090b80 	call	90b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8ea4:	01000074 	movhi	r4,1
    8ea8:	21285404 	addi	r4,r4,-24240
    8eac:	01400074 	movhi	r5,1
    8eb0:	29685404 	addi	r5,r5,-24240
    8eb4:	01800074 	movhi	r6,1
    8eb8:	31a85404 	addi	r6,r6,-24240
    8ebc:	00097640 	call	9764 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8ec0:	00095b00 	call	95b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8ec4:	01000074 	movhi	r4,1
    8ec8:	21258304 	addi	r4,r4,-27124
    8ecc:	0009d980 	call	9d98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8ed0:	d120c617 	ldw	r4,-31976(gp)
    8ed4:	d0e0c717 	ldw	r3,-31972(gp)
    8ed8:	d0a0c817 	ldw	r2,-31968(gp)
    8edc:	180b883a 	mov	r5,r3
    8ee0:	100d883a 	mov	r6,r2
    8ee4:	000805c0 	call	805c <main>
    8ee8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8eec:	01000044 	movi	r4,1
    8ef0:	000939c0 	call	939c <close>
  exit (result);
    8ef4:	e13fff17 	ldw	r4,-4(fp)
    8ef8:	0009dac0 	call	9dac <exit>

00008efc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8efc:	defffe04 	addi	sp,sp,-8
    8f00:	dfc00115 	stw	ra,4(sp)
    8f04:	df000015 	stw	fp,0(sp)
    8f08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8f0c:	00800074 	movhi	r2,1
    8f10:	10a91c04 	addi	r2,r2,-23440
    8f14:	10800017 	ldw	r2,0(r2)
    8f18:	10000526 	beq	r2,zero,8f30 <alt_get_errno+0x34>
    8f1c:	00800074 	movhi	r2,1
    8f20:	10a91c04 	addi	r2,r2,-23440
    8f24:	10800017 	ldw	r2,0(r2)
    8f28:	103ee83a 	callr	r2
    8f2c:	00000206 	br	8f38 <alt_get_errno+0x3c>
    8f30:	00800074 	movhi	r2,1
    8f34:	10a9d904 	addi	r2,r2,-22684
}
    8f38:	e037883a 	mov	sp,fp
    8f3c:	dfc00117 	ldw	ra,4(sp)
    8f40:	df000017 	ldw	fp,0(sp)
    8f44:	dec00204 	addi	sp,sp,8
    8f48:	f800283a 	ret

00008f4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8f4c:	defff904 	addi	sp,sp,-28
    8f50:	dfc00615 	stw	ra,24(sp)
    8f54:	df000515 	stw	fp,20(sp)
    8f58:	df000504 	addi	fp,sp,20
    8f5c:	e13ffd15 	stw	r4,-12(fp)
    8f60:	e17ffe15 	stw	r5,-8(fp)
    8f64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8f68:	e0bffd17 	ldw	r2,-12(fp)
    8f6c:	10000816 	blt	r2,zero,8f90 <write+0x44>
    8f70:	e13ffd17 	ldw	r4,-12(fp)
    8f74:	01400304 	movi	r5,12
    8f78:	00084140 	call	8414 <__mulsi3>
    8f7c:	1007883a 	mov	r3,r2
    8f80:	00800074 	movhi	r2,1
    8f84:	10a8b404 	addi	r2,r2,-23856
    8f88:	1885883a 	add	r2,r3,r2
    8f8c:	00000106 	br	8f94 <write+0x48>
    8f90:	0005883a 	mov	r2,zero
    8f94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8f98:	e0bffb17 	ldw	r2,-20(fp)
    8f9c:	10002126 	beq	r2,zero,9024 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8fa0:	e0bffb17 	ldw	r2,-20(fp)
    8fa4:	10800217 	ldw	r2,8(r2)
    8fa8:	108000cc 	andi	r2,r2,3
    8fac:	10001826 	beq	r2,zero,9010 <write+0xc4>
    8fb0:	e0bffb17 	ldw	r2,-20(fp)
    8fb4:	10800017 	ldw	r2,0(r2)
    8fb8:	10800617 	ldw	r2,24(r2)
    8fbc:	10001426 	beq	r2,zero,9010 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8fc0:	e0bffb17 	ldw	r2,-20(fp)
    8fc4:	10800017 	ldw	r2,0(r2)
    8fc8:	10800617 	ldw	r2,24(r2)
    8fcc:	e0ffff17 	ldw	r3,-4(fp)
    8fd0:	e13ffb17 	ldw	r4,-20(fp)
    8fd4:	e17ffe17 	ldw	r5,-8(fp)
    8fd8:	180d883a 	mov	r6,r3
    8fdc:	103ee83a 	callr	r2
    8fe0:	e0bffc15 	stw	r2,-16(fp)
    8fe4:	e0bffc17 	ldw	r2,-16(fp)
    8fe8:	1000070e 	bge	r2,zero,9008 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    8fec:	0008efc0 	call	8efc <alt_get_errno>
    8ff0:	1007883a 	mov	r3,r2
    8ff4:	e0bffc17 	ldw	r2,-16(fp)
    8ff8:	0085c83a 	sub	r2,zero,r2
    8ffc:	18800015 	stw	r2,0(r3)
        return -1;
    9000:	00bfffc4 	movi	r2,-1
    9004:	00000c06 	br	9038 <write+0xec>
      }
      return rval;
    9008:	e0bffc17 	ldw	r2,-16(fp)
    900c:	00000a06 	br	9038 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9010:	0008efc0 	call	8efc <alt_get_errno>
    9014:	1007883a 	mov	r3,r2
    9018:	00800344 	movi	r2,13
    901c:	18800015 	stw	r2,0(r3)
    9020:	00000406 	br	9034 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9024:	0008efc0 	call	8efc <alt_get_errno>
    9028:	1007883a 	mov	r3,r2
    902c:	00801444 	movi	r2,81
    9030:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9034:	00bfffc4 	movi	r2,-1
}
    9038:	e037883a 	mov	sp,fp
    903c:	dfc00117 	ldw	ra,4(sp)
    9040:	df000017 	ldw	fp,0(sp)
    9044:	dec00204 	addi	sp,sp,8
    9048:	f800283a 	ret

0000904c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    904c:	defffd04 	addi	sp,sp,-12
    9050:	dfc00215 	stw	ra,8(sp)
    9054:	df000115 	stw	fp,4(sp)
    9058:	df000104 	addi	fp,sp,4
    905c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9060:	e13fff17 	ldw	r4,-4(fp)
    9064:	01400074 	movhi	r5,1
    9068:	29691904 	addi	r5,r5,-23452
    906c:	000950c0 	call	950c <alt_dev_llist_insert>
}
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9084:	defffd04 	addi	sp,sp,-12
    9088:	dfc00215 	stw	ra,8(sp)
    908c:	df000115 	stw	fp,4(sp)
    9090:	df000104 	addi	fp,sp,4
    9094:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9098:	0009b000 	call	9b00 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    909c:	00800044 	movi	r2,1
    90a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    90a4:	e037883a 	mov	sp,fp
    90a8:	dfc00117 	ldw	ra,4(sp)
    90ac:	df000017 	ldw	fp,0(sp)
    90b0:	dec00204 	addi	sp,sp,8
    90b4:	f800283a 	ret

000090b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    90b8:	defffe04 	addi	sp,sp,-8
    90bc:	dfc00115 	stw	ra,4(sp)
    90c0:	df000015 	stw	fp,0(sp)
    90c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    90c8:	00800074 	movhi	r2,1
    90cc:	10a9dd04 	addi	r2,r2,-22668
    90d0:	00c00074 	movhi	r3,1
    90d4:	18c50004 	addi	r3,r3,5120
    90d8:	10c00015 	stw	r3,0(r2)
    90dc:	00800074 	movhi	r2,1
    90e0:	10a9de04 	addi	r2,r2,-22664
    90e4:	00c0bef4 	movhi	r3,763
    90e8:	18fc2004 	addi	r3,r3,-3968
    90ec:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    90f0:	01000074 	movhi	r4,1
    90f4:	21289f04 	addi	r4,r4,-23940
    90f8:	000904c0 	call	904c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    90fc:	0001883a 	nop
}
    9100:	e037883a 	mov	sp,fp
    9104:	dfc00117 	ldw	ra,4(sp)
    9108:	df000017 	ldw	fp,0(sp)
    910c:	dec00204 	addi	sp,sp,8
    9110:	f800283a 	ret

00009114 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9114:	defffa04 	addi	sp,sp,-24
    9118:	dfc00515 	stw	ra,20(sp)
    911c:	df000415 	stw	fp,16(sp)
    9120:	df000404 	addi	fp,sp,16
    9124:	e13ffd15 	stw	r4,-12(fp)
    9128:	e17ffe15 	stw	r5,-8(fp)
    912c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9130:	e0bffd17 	ldw	r2,-12(fp)
    9134:	10800017 	ldw	r2,0(r2)
    9138:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    913c:	e0bffc17 	ldw	r2,-16(fp)
    9140:	10c00a04 	addi	r3,r2,40
    9144:	e0bffd17 	ldw	r2,-12(fp)
    9148:	10800217 	ldw	r2,8(r2)
    914c:	1809883a 	mov	r4,r3
    9150:	e17ffe17 	ldw	r5,-8(fp)
    9154:	e1bfff17 	ldw	r6,-4(fp)
    9158:	100f883a 	mov	r7,r2
    915c:	00091d40 	call	91d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9160:	e037883a 	mov	sp,fp
    9164:	dfc00117 	ldw	ra,4(sp)
    9168:	df000017 	ldw	fp,0(sp)
    916c:	dec00204 	addi	sp,sp,8
    9170:	f800283a 	ret

00009174 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9174:	defffa04 	addi	sp,sp,-24
    9178:	dfc00515 	stw	ra,20(sp)
    917c:	df000415 	stw	fp,16(sp)
    9180:	df000404 	addi	fp,sp,16
    9184:	e13ffd15 	stw	r4,-12(fp)
    9188:	e17ffe15 	stw	r5,-8(fp)
    918c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9190:	e0bffd17 	ldw	r2,-12(fp)
    9194:	10800017 	ldw	r2,0(r2)
    9198:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    919c:	e0bffc17 	ldw	r2,-16(fp)
    91a0:	10c00a04 	addi	r3,r2,40
    91a4:	e0bffd17 	ldw	r2,-12(fp)
    91a8:	10800217 	ldw	r2,8(r2)
    91ac:	1809883a 	mov	r4,r3
    91b0:	e17ffe17 	ldw	r5,-8(fp)
    91b4:	e1bfff17 	ldw	r6,-4(fp)
    91b8:	100f883a 	mov	r7,r2
    91bc:	00092b80 	call	92b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    91c0:	e037883a 	mov	sp,fp
    91c4:	dfc00117 	ldw	ra,4(sp)
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00204 	addi	sp,sp,8
    91d0:	f800283a 	ret

000091d4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    91d4:	defff704 	addi	sp,sp,-36
    91d8:	df000815 	stw	fp,32(sp)
    91dc:	df000804 	addi	fp,sp,32
    91e0:	e13ffc15 	stw	r4,-16(fp)
    91e4:	e17ffd15 	stw	r5,-12(fp)
    91e8:	e1bffe15 	stw	r6,-8(fp)
    91ec:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    91f0:	e0bffc17 	ldw	r2,-16(fp)
    91f4:	10800017 	ldw	r2,0(r2)
    91f8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    91fc:	e0bffd17 	ldw	r2,-12(fp)
    9200:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9204:	e0bffe17 	ldw	r2,-8(fp)
    9208:	e0fffd17 	ldw	r3,-12(fp)
    920c:	1885883a 	add	r2,r3,r2
    9210:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9214:	00001406 	br	9268 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9218:	e0bff917 	ldw	r2,-28(fp)
    921c:	10800037 	ldwio	r2,0(r2)
    9220:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9224:	e0bffb17 	ldw	r2,-20(fp)
    9228:	10a0000c 	andi	r2,r2,32768
    922c:	10000626 	beq	r2,zero,9248 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9230:	e0bff817 	ldw	r2,-32(fp)
    9234:	10c00044 	addi	r3,r2,1
    9238:	e0fff815 	stw	r3,-32(fp)
    923c:	e0fffb17 	ldw	r3,-20(fp)
    9240:	10c00005 	stb	r3,0(r2)
    9244:	00000806 	br	9268 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    9248:	e0fff817 	ldw	r3,-32(fp)
    924c:	e0bffd17 	ldw	r2,-12(fp)
    9250:	18800126 	beq	r3,r2,9258 <altera_avalon_jtag_uart_read+0x84>
      break;
    9254:	00000706 	br	9274 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
    9258:	e0bfff17 	ldw	r2,-4(fp)
    925c:	1090000c 	andi	r2,r2,16384
    9260:	10000126 	beq	r2,zero,9268 <altera_avalon_jtag_uart_read+0x94>
      break;   
    9264:	00000306 	br	9274 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9268:	e0fff817 	ldw	r3,-32(fp)
    926c:	e0bffa17 	ldw	r2,-24(fp)
    9270:	18bfe936 	bltu	r3,r2,9218 <_gp+0xffff6dc8>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9274:	e0fff817 	ldw	r3,-32(fp)
    9278:	e0bffd17 	ldw	r2,-12(fp)
    927c:	18800426 	beq	r3,r2,9290 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
    9280:	e0fff817 	ldw	r3,-32(fp)
    9284:	e0bffd17 	ldw	r2,-12(fp)
    9288:	1885c83a 	sub	r2,r3,r2
    928c:	00000606 	br	92a8 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
    9290:	e0bfff17 	ldw	r2,-4(fp)
    9294:	1090000c 	andi	r2,r2,16384
    9298:	10000226 	beq	r2,zero,92a4 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
    929c:	00bffd44 	movi	r2,-11
    92a0:	00000106 	br	92a8 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
    92a4:	00bffec4 	movi	r2,-5
}
    92a8:	e037883a 	mov	sp,fp
    92ac:	df000017 	ldw	fp,0(sp)
    92b0:	dec00104 	addi	sp,sp,4
    92b4:	f800283a 	ret

000092b8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    92b8:	defff904 	addi	sp,sp,-28
    92bc:	df000615 	stw	fp,24(sp)
    92c0:	df000604 	addi	fp,sp,24
    92c4:	e13ffc15 	stw	r4,-16(fp)
    92c8:	e17ffd15 	stw	r5,-12(fp)
    92cc:	e1bffe15 	stw	r6,-8(fp)
    92d0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    92d4:	e0bffc17 	ldw	r2,-16(fp)
    92d8:	10800017 	ldw	r2,0(r2)
    92dc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    92e0:	e0bffe17 	ldw	r2,-8(fp)
    92e4:	e0fffd17 	ldw	r3,-12(fp)
    92e8:	1885883a 	add	r2,r3,r2
    92ec:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    92f0:	00000e06 	br	932c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    92f4:	e0bffa17 	ldw	r2,-24(fp)
    92f8:	10800104 	addi	r2,r2,4
    92fc:	10800037 	ldwio	r2,0(r2)
    9300:	10bfffec 	andhi	r2,r2,65535
    9304:	10000926 	beq	r2,zero,932c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9308:	e0fffa17 	ldw	r3,-24(fp)
    930c:	e0bffd17 	ldw	r2,-12(fp)
    9310:	11000044 	addi	r4,r2,1
    9314:	e13ffd15 	stw	r4,-12(fp)
    9318:	10800003 	ldbu	r2,0(r2)
    931c:	10803fcc 	andi	r2,r2,255
    9320:	1080201c 	xori	r2,r2,128
    9324:	10bfe004 	addi	r2,r2,-128
    9328:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    932c:	e0fffd17 	ldw	r3,-12(fp)
    9330:	e0bffb17 	ldw	r2,-20(fp)
    9334:	18bfef36 	bltu	r3,r2,92f4 <_gp+0xffff6ea4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9338:	e0bffe17 	ldw	r2,-8(fp)
}
    933c:	e037883a 	mov	sp,fp
    9340:	df000017 	ldw	fp,0(sp)
    9344:	dec00104 	addi	sp,sp,4
    9348:	f800283a 	ret

0000934c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    934c:	defffe04 	addi	sp,sp,-8
    9350:	dfc00115 	stw	ra,4(sp)
    9354:	df000015 	stw	fp,0(sp)
    9358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    935c:	00800074 	movhi	r2,1
    9360:	10a91c04 	addi	r2,r2,-23440
    9364:	10800017 	ldw	r2,0(r2)
    9368:	10000526 	beq	r2,zero,9380 <alt_get_errno+0x34>
    936c:	00800074 	movhi	r2,1
    9370:	10a91c04 	addi	r2,r2,-23440
    9374:	10800017 	ldw	r2,0(r2)
    9378:	103ee83a 	callr	r2
    937c:	00000206 	br	9388 <alt_get_errno+0x3c>
    9380:	00800074 	movhi	r2,1
    9384:	10a9d904 	addi	r2,r2,-22684
}
    9388:	e037883a 	mov	sp,fp
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	df000017 	ldw	fp,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    939c:	defffb04 	addi	sp,sp,-20
    93a0:	dfc00415 	stw	ra,16(sp)
    93a4:	df000315 	stw	fp,12(sp)
    93a8:	df000304 	addi	fp,sp,12
    93ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    93b0:	e0bfff17 	ldw	r2,-4(fp)
    93b4:	10000816 	blt	r2,zero,93d8 <close+0x3c>
    93b8:	e13fff17 	ldw	r4,-4(fp)
    93bc:	01400304 	movi	r5,12
    93c0:	00084140 	call	8414 <__mulsi3>
    93c4:	1007883a 	mov	r3,r2
    93c8:	00800074 	movhi	r2,1
    93cc:	10a8b404 	addi	r2,r2,-23856
    93d0:	1885883a 	add	r2,r3,r2
    93d4:	00000106 	br	93dc <close+0x40>
    93d8:	0005883a 	mov	r2,zero
    93dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    93e0:	e0bffd17 	ldw	r2,-12(fp)
    93e4:	10001926 	beq	r2,zero,944c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    93e8:	e0bffd17 	ldw	r2,-12(fp)
    93ec:	10800017 	ldw	r2,0(r2)
    93f0:	10800417 	ldw	r2,16(r2)
    93f4:	10000626 	beq	r2,zero,9410 <close+0x74>
    93f8:	e0bffd17 	ldw	r2,-12(fp)
    93fc:	10800017 	ldw	r2,0(r2)
    9400:	10800417 	ldw	r2,16(r2)
    9404:	e13ffd17 	ldw	r4,-12(fp)
    9408:	103ee83a 	callr	r2
    940c:	00000106 	br	9414 <close+0x78>
    9410:	0005883a 	mov	r2,zero
    9414:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9418:	e13fff17 	ldw	r4,-4(fp)
    941c:	0009a800 	call	9a80 <alt_release_fd>
    if (rval < 0)
    9420:	e0bffe17 	ldw	r2,-8(fp)
    9424:	1000070e 	bge	r2,zero,9444 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9428:	000934c0 	call	934c <alt_get_errno>
    942c:	1007883a 	mov	r3,r2
    9430:	e0bffe17 	ldw	r2,-8(fp)
    9434:	0085c83a 	sub	r2,zero,r2
    9438:	18800015 	stw	r2,0(r3)
      return -1;
    943c:	00bfffc4 	movi	r2,-1
    9440:	00000706 	br	9460 <close+0xc4>
    }
    return 0;
    9444:	0005883a 	mov	r2,zero
    9448:	00000506 	br	9460 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    944c:	000934c0 	call	934c <alt_get_errno>
    9450:	1007883a 	mov	r3,r2
    9454:	00801444 	movi	r2,81
    9458:	18800015 	stw	r2,0(r3)
    return -1;
    945c:	00bfffc4 	movi	r2,-1
  }
}
    9460:	e037883a 	mov	sp,fp
    9464:	dfc00117 	ldw	ra,4(sp)
    9468:	df000017 	ldw	fp,0(sp)
    946c:	dec00204 	addi	sp,sp,8
    9470:	f800283a 	ret

00009474 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9474:	deffff04 	addi	sp,sp,-4
    9478:	df000015 	stw	fp,0(sp)
    947c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9480:	e037883a 	mov	sp,fp
    9484:	df000017 	ldw	fp,0(sp)
    9488:	dec00104 	addi	sp,sp,4
    948c:	f800283a 	ret

00009490 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9490:	defffc04 	addi	sp,sp,-16
    9494:	df000315 	stw	fp,12(sp)
    9498:	df000304 	addi	fp,sp,12
    949c:	e13ffd15 	stw	r4,-12(fp)
    94a0:	e17ffe15 	stw	r5,-8(fp)
    94a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    94a8:	e0bfff17 	ldw	r2,-4(fp)
}
    94ac:	e037883a 	mov	sp,fp
    94b0:	df000017 	ldw	fp,0(sp)
    94b4:	dec00104 	addi	sp,sp,4
    94b8:	f800283a 	ret

000094bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    94bc:	defffe04 	addi	sp,sp,-8
    94c0:	dfc00115 	stw	ra,4(sp)
    94c4:	df000015 	stw	fp,0(sp)
    94c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    94cc:	00800074 	movhi	r2,1
    94d0:	10a91c04 	addi	r2,r2,-23440
    94d4:	10800017 	ldw	r2,0(r2)
    94d8:	10000526 	beq	r2,zero,94f0 <alt_get_errno+0x34>
    94dc:	00800074 	movhi	r2,1
    94e0:	10a91c04 	addi	r2,r2,-23440
    94e4:	10800017 	ldw	r2,0(r2)
    94e8:	103ee83a 	callr	r2
    94ec:	00000206 	br	94f8 <alt_get_errno+0x3c>
    94f0:	00800074 	movhi	r2,1
    94f4:	10a9d904 	addi	r2,r2,-22684
}
    94f8:	e037883a 	mov	sp,fp
    94fc:	dfc00117 	ldw	ra,4(sp)
    9500:	df000017 	ldw	fp,0(sp)
    9504:	dec00204 	addi	sp,sp,8
    9508:	f800283a 	ret

0000950c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    950c:	defffa04 	addi	sp,sp,-24
    9510:	dfc00515 	stw	ra,20(sp)
    9514:	df000415 	stw	fp,16(sp)
    9518:	df000404 	addi	fp,sp,16
    951c:	e13ffe15 	stw	r4,-8(fp)
    9520:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9524:	e0bffe17 	ldw	r2,-8(fp)
    9528:	10000326 	beq	r2,zero,9538 <alt_dev_llist_insert+0x2c>
    952c:	e0bffe17 	ldw	r2,-8(fp)
    9530:	10800217 	ldw	r2,8(r2)
    9534:	1000061e 	bne	r2,zero,9550 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9538:	00094bc0 	call	94bc <alt_get_errno>
    953c:	1007883a 	mov	r3,r2
    9540:	00800584 	movi	r2,22
    9544:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9548:	00bffa84 	movi	r2,-22
    954c:	00001306 	br	959c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9550:	e0bffe17 	ldw	r2,-8(fp)
    9554:	e0ffff17 	ldw	r3,-4(fp)
    9558:	e0fffc15 	stw	r3,-16(fp)
    955c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9560:	e0bffd17 	ldw	r2,-12(fp)
    9564:	e0fffc17 	ldw	r3,-16(fp)
    9568:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    956c:	e0bffc17 	ldw	r2,-16(fp)
    9570:	10c00017 	ldw	r3,0(r2)
    9574:	e0bffd17 	ldw	r2,-12(fp)
    9578:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    957c:	e0bffc17 	ldw	r2,-16(fp)
    9580:	10800017 	ldw	r2,0(r2)
    9584:	e0fffd17 	ldw	r3,-12(fp)
    9588:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    958c:	e0bffc17 	ldw	r2,-16(fp)
    9590:	e0fffd17 	ldw	r3,-12(fp)
    9594:	10c00015 	stw	r3,0(r2)

  return 0;  
    9598:	0005883a 	mov	r2,zero
}
    959c:	e037883a 	mov	sp,fp
    95a0:	dfc00117 	ldw	ra,4(sp)
    95a4:	df000017 	ldw	fp,0(sp)
    95a8:	dec00204 	addi	sp,sp,8
    95ac:	f800283a 	ret

000095b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    95b0:	defffd04 	addi	sp,sp,-12
    95b4:	dfc00215 	stw	ra,8(sp)
    95b8:	df000115 	stw	fp,4(sp)
    95bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    95c0:	00800074 	movhi	r2,1
    95c4:	10a84304 	addi	r2,r2,-24308
    95c8:	e0bfff15 	stw	r2,-4(fp)
    95cc:	00000606 	br	95e8 <_do_ctors+0x38>
        (*ctor) (); 
    95d0:	e0bfff17 	ldw	r2,-4(fp)
    95d4:	10800017 	ldw	r2,0(r2)
    95d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    95dc:	e0bfff17 	ldw	r2,-4(fp)
    95e0:	10bfff04 	addi	r2,r2,-4
    95e4:	e0bfff15 	stw	r2,-4(fp)
    95e8:	e0ffff17 	ldw	r3,-4(fp)
    95ec:	00800074 	movhi	r2,1
    95f0:	10a84404 	addi	r2,r2,-24304
    95f4:	18bff62e 	bgeu	r3,r2,95d0 <_gp+0xffff7180>
        (*ctor) (); 
}
    95f8:	e037883a 	mov	sp,fp
    95fc:	dfc00117 	ldw	ra,4(sp)
    9600:	df000017 	ldw	fp,0(sp)
    9604:	dec00204 	addi	sp,sp,8
    9608:	f800283a 	ret

0000960c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    960c:	defffd04 	addi	sp,sp,-12
    9610:	dfc00215 	stw	ra,8(sp)
    9614:	df000115 	stw	fp,4(sp)
    9618:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    961c:	00800074 	movhi	r2,1
    9620:	10a84304 	addi	r2,r2,-24308
    9624:	e0bfff15 	stw	r2,-4(fp)
    9628:	00000606 	br	9644 <_do_dtors+0x38>
        (*dtor) (); 
    962c:	e0bfff17 	ldw	r2,-4(fp)
    9630:	10800017 	ldw	r2,0(r2)
    9634:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9638:	e0bfff17 	ldw	r2,-4(fp)
    963c:	10bfff04 	addi	r2,r2,-4
    9640:	e0bfff15 	stw	r2,-4(fp)
    9644:	e0ffff17 	ldw	r3,-4(fp)
    9648:	00800074 	movhi	r2,1
    964c:	10a84404 	addi	r2,r2,-24304
    9650:	18bff62e 	bgeu	r3,r2,962c <_gp+0xffff71dc>
        (*dtor) (); 
}
    9654:	e037883a 	mov	sp,fp
    9658:	dfc00117 	ldw	ra,4(sp)
    965c:	df000017 	ldw	fp,0(sp)
    9660:	dec00204 	addi	sp,sp,8
    9664:	f800283a 	ret

00009668 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9668:	deffff04 	addi	sp,sp,-4
    966c:	df000015 	stw	fp,0(sp)
    9670:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9674:	e037883a 	mov	sp,fp
    9678:	df000017 	ldw	fp,0(sp)
    967c:	dec00104 	addi	sp,sp,4
    9680:	f800283a 	ret

00009684 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9684:	defff804 	addi	sp,sp,-32
    9688:	dfc00715 	stw	ra,28(sp)
    968c:	df000615 	stw	fp,24(sp)
    9690:	dc000515 	stw	r16,20(sp)
    9694:	df000604 	addi	fp,sp,24
    9698:	e13ffb15 	stw	r4,-20(fp)
    969c:	e17ffc15 	stw	r5,-16(fp)
    96a0:	e1bffd15 	stw	r6,-12(fp)
    96a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    96a8:	e13ffc17 	ldw	r4,-16(fp)
    96ac:	e17ffd17 	ldw	r5,-12(fp)
    96b0:	e1bffe17 	ldw	r6,-8(fp)
    96b4:	00099200 	call	9920 <open>
    96b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    96bc:	e0bffa17 	ldw	r2,-24(fp)
    96c0:	10002216 	blt	r2,zero,974c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    96c4:	04000074 	movhi	r16,1
    96c8:	8428b404 	addi	r16,r16,-23856
    96cc:	e0bffa17 	ldw	r2,-24(fp)
    96d0:	1009883a 	mov	r4,r2
    96d4:	01400304 	movi	r5,12
    96d8:	00084140 	call	8414 <__mulsi3>
    96dc:	8085883a 	add	r2,r16,r2
    96e0:	10c00017 	ldw	r3,0(r2)
    96e4:	e0bffb17 	ldw	r2,-20(fp)
    96e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    96ec:	04000074 	movhi	r16,1
    96f0:	8428b404 	addi	r16,r16,-23856
    96f4:	e0bffa17 	ldw	r2,-24(fp)
    96f8:	1009883a 	mov	r4,r2
    96fc:	01400304 	movi	r5,12
    9700:	00084140 	call	8414 <__mulsi3>
    9704:	8085883a 	add	r2,r16,r2
    9708:	10800104 	addi	r2,r2,4
    970c:	10c00017 	ldw	r3,0(r2)
    9710:	e0bffb17 	ldw	r2,-20(fp)
    9714:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9718:	04000074 	movhi	r16,1
    971c:	8428b404 	addi	r16,r16,-23856
    9720:	e0bffa17 	ldw	r2,-24(fp)
    9724:	1009883a 	mov	r4,r2
    9728:	01400304 	movi	r5,12
    972c:	00084140 	call	8414 <__mulsi3>
    9730:	8085883a 	add	r2,r16,r2
    9734:	10800204 	addi	r2,r2,8
    9738:	10c00017 	ldw	r3,0(r2)
    973c:	e0bffb17 	ldw	r2,-20(fp)
    9740:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9744:	e13ffa17 	ldw	r4,-24(fp)
    9748:	0009a800 	call	9a80 <alt_release_fd>
  }
} 
    974c:	e6ffff04 	addi	sp,fp,-4
    9750:	dfc00217 	ldw	ra,8(sp)
    9754:	df000117 	ldw	fp,4(sp)
    9758:	dc000017 	ldw	r16,0(sp)
    975c:	dec00304 	addi	sp,sp,12
    9760:	f800283a 	ret

00009764 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9764:	defffb04 	addi	sp,sp,-20
    9768:	dfc00415 	stw	ra,16(sp)
    976c:	df000315 	stw	fp,12(sp)
    9770:	df000304 	addi	fp,sp,12
    9774:	e13ffd15 	stw	r4,-12(fp)
    9778:	e17ffe15 	stw	r5,-8(fp)
    977c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9780:	01000074 	movhi	r4,1
    9784:	2128b704 	addi	r4,r4,-23844
    9788:	e17ffd17 	ldw	r5,-12(fp)
    978c:	01800044 	movi	r6,1
    9790:	01c07fc4 	movi	r7,511
    9794:	00096840 	call	9684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9798:	01000074 	movhi	r4,1
    979c:	2128b404 	addi	r4,r4,-23856
    97a0:	e17ffe17 	ldw	r5,-8(fp)
    97a4:	000d883a 	mov	r6,zero
    97a8:	01c07fc4 	movi	r7,511
    97ac:	00096840 	call	9684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    97b0:	01000074 	movhi	r4,1
    97b4:	2128ba04 	addi	r4,r4,-23832
    97b8:	e17fff17 	ldw	r5,-4(fp)
    97bc:	01800044 	movi	r6,1
    97c0:	01c07fc4 	movi	r7,511
    97c4:	00096840 	call	9684 <alt_open_fd>
}  
    97c8:	e037883a 	mov	sp,fp
    97cc:	dfc00117 	ldw	ra,4(sp)
    97d0:	df000017 	ldw	fp,0(sp)
    97d4:	dec00204 	addi	sp,sp,8
    97d8:	f800283a 	ret

000097dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97dc:	defffe04 	addi	sp,sp,-8
    97e0:	dfc00115 	stw	ra,4(sp)
    97e4:	df000015 	stw	fp,0(sp)
    97e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    97ec:	00800074 	movhi	r2,1
    97f0:	10a91c04 	addi	r2,r2,-23440
    97f4:	10800017 	ldw	r2,0(r2)
    97f8:	10000526 	beq	r2,zero,9810 <alt_get_errno+0x34>
    97fc:	00800074 	movhi	r2,1
    9800:	10a91c04 	addi	r2,r2,-23440
    9804:	10800017 	ldw	r2,0(r2)
    9808:	103ee83a 	callr	r2
    980c:	00000206 	br	9818 <alt_get_errno+0x3c>
    9810:	00800074 	movhi	r2,1
    9814:	10a9d904 	addi	r2,r2,-22684
}
    9818:	e037883a 	mov	sp,fp
    981c:	dfc00117 	ldw	ra,4(sp)
    9820:	df000017 	ldw	fp,0(sp)
    9824:	dec00204 	addi	sp,sp,8
    9828:	f800283a 	ret

0000982c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    982c:	defffb04 	addi	sp,sp,-20
    9830:	dfc00415 	stw	ra,16(sp)
    9834:	df000315 	stw	fp,12(sp)
    9838:	dc000215 	stw	r16,8(sp)
    983c:	df000304 	addi	fp,sp,12
    9840:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9844:	e0bffe17 	ldw	r2,-8(fp)
    9848:	10800217 	ldw	r2,8(r2)
    984c:	10d00034 	orhi	r3,r2,16384
    9850:	e0bffe17 	ldw	r2,-8(fp)
    9854:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9858:	e03ffd15 	stw	zero,-12(fp)
    985c:	00002306 	br	98ec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9860:	04000074 	movhi	r16,1
    9864:	8428b404 	addi	r16,r16,-23856
    9868:	e0bffd17 	ldw	r2,-12(fp)
    986c:	1009883a 	mov	r4,r2
    9870:	01400304 	movi	r5,12
    9874:	00084140 	call	8414 <__mulsi3>
    9878:	8085883a 	add	r2,r16,r2
    987c:	10c00017 	ldw	r3,0(r2)
    9880:	e0bffe17 	ldw	r2,-8(fp)
    9884:	10800017 	ldw	r2,0(r2)
    9888:	1880151e 	bne	r3,r2,98e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    988c:	04000074 	movhi	r16,1
    9890:	8428b404 	addi	r16,r16,-23856
    9894:	e0bffd17 	ldw	r2,-12(fp)
    9898:	1009883a 	mov	r4,r2
    989c:	01400304 	movi	r5,12
    98a0:	00084140 	call	8414 <__mulsi3>
    98a4:	8085883a 	add	r2,r16,r2
    98a8:	10800204 	addi	r2,r2,8
    98ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    98b0:	10000b0e 	bge	r2,zero,98e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    98b4:	e13ffd17 	ldw	r4,-12(fp)
    98b8:	01400304 	movi	r5,12
    98bc:	00084140 	call	8414 <__mulsi3>
    98c0:	1007883a 	mov	r3,r2
    98c4:	00800074 	movhi	r2,1
    98c8:	10a8b404 	addi	r2,r2,-23856
    98cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    98d0:	e0bffe17 	ldw	r2,-8(fp)
    98d4:	18800226 	beq	r3,r2,98e0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    98d8:	00bffcc4 	movi	r2,-13
    98dc:	00000a06 	br	9908 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    98e0:	e0bffd17 	ldw	r2,-12(fp)
    98e4:	10800044 	addi	r2,r2,1
    98e8:	e0bffd15 	stw	r2,-12(fp)
    98ec:	00800074 	movhi	r2,1
    98f0:	10a91b04 	addi	r2,r2,-23444
    98f4:	10800017 	ldw	r2,0(r2)
    98f8:	1007883a 	mov	r3,r2
    98fc:	e0bffd17 	ldw	r2,-12(fp)
    9900:	18bfd72e 	bgeu	r3,r2,9860 <_gp+0xffff7410>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9904:	0005883a 	mov	r2,zero
}
    9908:	e6ffff04 	addi	sp,fp,-4
    990c:	dfc00217 	ldw	ra,8(sp)
    9910:	df000117 	ldw	fp,4(sp)
    9914:	dc000017 	ldw	r16,0(sp)
    9918:	dec00304 	addi	sp,sp,12
    991c:	f800283a 	ret

00009920 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9920:	defff604 	addi	sp,sp,-40
    9924:	dfc00915 	stw	ra,36(sp)
    9928:	df000815 	stw	fp,32(sp)
    992c:	df000804 	addi	fp,sp,32
    9930:	e13ffd15 	stw	r4,-12(fp)
    9934:	e17ffe15 	stw	r5,-8(fp)
    9938:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    993c:	00bfffc4 	movi	r2,-1
    9940:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9944:	00bffb44 	movi	r2,-19
    9948:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    994c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9950:	e13ffd17 	ldw	r4,-12(fp)
    9954:	01400074 	movhi	r5,1
    9958:	29691904 	addi	r5,r5,-23452
    995c:	0009b200 	call	9b20 <alt_find_dev>
    9960:	e0bff815 	stw	r2,-32(fp)
    9964:	e0bff817 	ldw	r2,-32(fp)
    9968:	1000051e 	bne	r2,zero,9980 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    996c:	e13ffd17 	ldw	r4,-12(fp)
    9970:	0009bb00 	call	9bb0 <alt_find_file>
    9974:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9978:	00800044 	movi	r2,1
    997c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9980:	e0bff817 	ldw	r2,-32(fp)
    9984:	10002b26 	beq	r2,zero,9a34 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9988:	e13ff817 	ldw	r4,-32(fp)
    998c:	0009cc40 	call	9cc4 <alt_get_fd>
    9990:	e0bff915 	stw	r2,-28(fp)
    9994:	e0bff917 	ldw	r2,-28(fp)
    9998:	1000030e 	bge	r2,zero,99a8 <open+0x88>
    {
      status = index;
    999c:	e0bff917 	ldw	r2,-28(fp)
    99a0:	e0bffa15 	stw	r2,-24(fp)
    99a4:	00002506 	br	9a3c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    99a8:	e13ff917 	ldw	r4,-28(fp)
    99ac:	01400304 	movi	r5,12
    99b0:	00084140 	call	8414 <__mulsi3>
    99b4:	1007883a 	mov	r3,r2
    99b8:	00800074 	movhi	r2,1
    99bc:	10a8b404 	addi	r2,r2,-23856
    99c0:	1885883a 	add	r2,r3,r2
    99c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    99c8:	e0fffe17 	ldw	r3,-8(fp)
    99cc:	00900034 	movhi	r2,16384
    99d0:	10bfffc4 	addi	r2,r2,-1
    99d4:	1886703a 	and	r3,r3,r2
    99d8:	e0bffc17 	ldw	r2,-16(fp)
    99dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    99e0:	e0bffb17 	ldw	r2,-20(fp)
    99e4:	1000051e 	bne	r2,zero,99fc <open+0xdc>
    99e8:	e13ffc17 	ldw	r4,-16(fp)
    99ec:	000982c0 	call	982c <alt_file_locked>
    99f0:	e0bffa15 	stw	r2,-24(fp)
    99f4:	e0bffa17 	ldw	r2,-24(fp)
    99f8:	10001016 	blt	r2,zero,9a3c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    99fc:	e0bff817 	ldw	r2,-32(fp)
    9a00:	10800317 	ldw	r2,12(r2)
    9a04:	10000826 	beq	r2,zero,9a28 <open+0x108>
    9a08:	e0bff817 	ldw	r2,-32(fp)
    9a0c:	10800317 	ldw	r2,12(r2)
    9a10:	e13ffc17 	ldw	r4,-16(fp)
    9a14:	e17ffd17 	ldw	r5,-12(fp)
    9a18:	e1bffe17 	ldw	r6,-8(fp)
    9a1c:	e1ffff17 	ldw	r7,-4(fp)
    9a20:	103ee83a 	callr	r2
    9a24:	00000106 	br	9a2c <open+0x10c>
    9a28:	0005883a 	mov	r2,zero
    9a2c:	e0bffa15 	stw	r2,-24(fp)
    9a30:	00000206 	br	9a3c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9a34:	00bffb44 	movi	r2,-19
    9a38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9a3c:	e0bffa17 	ldw	r2,-24(fp)
    9a40:	1000090e 	bge	r2,zero,9a68 <open+0x148>
  {
    alt_release_fd (index);  
    9a44:	e13ff917 	ldw	r4,-28(fp)
    9a48:	0009a800 	call	9a80 <alt_release_fd>
    ALT_ERRNO = -status;
    9a4c:	00097dc0 	call	97dc <alt_get_errno>
    9a50:	1007883a 	mov	r3,r2
    9a54:	e0bffa17 	ldw	r2,-24(fp)
    9a58:	0085c83a 	sub	r2,zero,r2
    9a5c:	18800015 	stw	r2,0(r3)
    return -1;
    9a60:	00bfffc4 	movi	r2,-1
    9a64:	00000106 	br	9a6c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    9a68:	e0bff917 	ldw	r2,-28(fp)
}
    9a6c:	e037883a 	mov	sp,fp
    9a70:	dfc00117 	ldw	ra,4(sp)
    9a74:	df000017 	ldw	fp,0(sp)
    9a78:	dec00204 	addi	sp,sp,8
    9a7c:	f800283a 	ret

00009a80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9a80:	defffc04 	addi	sp,sp,-16
    9a84:	dfc00315 	stw	ra,12(sp)
    9a88:	df000215 	stw	fp,8(sp)
    9a8c:	dc000115 	stw	r16,4(sp)
    9a90:	df000204 	addi	fp,sp,8
    9a94:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9a98:	e0bffe17 	ldw	r2,-8(fp)
    9a9c:	108000d0 	cmplti	r2,r2,3
    9aa0:	1000111e 	bne	r2,zero,9ae8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9aa4:	04000074 	movhi	r16,1
    9aa8:	8428b404 	addi	r16,r16,-23856
    9aac:	e0bffe17 	ldw	r2,-8(fp)
    9ab0:	1009883a 	mov	r4,r2
    9ab4:	01400304 	movi	r5,12
    9ab8:	00084140 	call	8414 <__mulsi3>
    9abc:	8085883a 	add	r2,r16,r2
    9ac0:	10800204 	addi	r2,r2,8
    9ac4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9ac8:	04000074 	movhi	r16,1
    9acc:	8428b404 	addi	r16,r16,-23856
    9ad0:	e0bffe17 	ldw	r2,-8(fp)
    9ad4:	1009883a 	mov	r4,r2
    9ad8:	01400304 	movi	r5,12
    9adc:	00084140 	call	8414 <__mulsi3>
    9ae0:	8085883a 	add	r2,r16,r2
    9ae4:	10000015 	stw	zero,0(r2)
  }
}
    9ae8:	e6ffff04 	addi	sp,fp,-4
    9aec:	dfc00217 	ldw	ra,8(sp)
    9af0:	df000117 	ldw	fp,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00304 	addi	sp,sp,12
    9afc:	f800283a 	ret

00009b00 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9b00:	deffff04 	addi	sp,sp,-4
    9b04:	df000015 	stw	fp,0(sp)
    9b08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9b0c:	000170fa 	wrctl	ienable,zero
}
    9b10:	e037883a 	mov	sp,fp
    9b14:	df000017 	ldw	fp,0(sp)
    9b18:	dec00104 	addi	sp,sp,4
    9b1c:	f800283a 	ret

00009b20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9b20:	defffa04 	addi	sp,sp,-24
    9b24:	dfc00515 	stw	ra,20(sp)
    9b28:	df000415 	stw	fp,16(sp)
    9b2c:	df000404 	addi	fp,sp,16
    9b30:	e13ffe15 	stw	r4,-8(fp)
    9b34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9b38:	e0bfff17 	ldw	r2,-4(fp)
    9b3c:	10800017 	ldw	r2,0(r2)
    9b40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9b44:	e13ffe17 	ldw	r4,-8(fp)
    9b48:	00085580 	call	8558 <strlen>
    9b4c:	10800044 	addi	r2,r2,1
    9b50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9b54:	00000d06 	br	9b8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9b58:	e0bffc17 	ldw	r2,-16(fp)
    9b5c:	10c00217 	ldw	r3,8(r2)
    9b60:	e0bffd17 	ldw	r2,-12(fp)
    9b64:	1809883a 	mov	r4,r3
    9b68:	e17ffe17 	ldw	r5,-8(fp)
    9b6c:	100d883a 	mov	r6,r2
    9b70:	0009dcc0 	call	9dcc <memcmp>
    9b74:	1000021e 	bne	r2,zero,9b80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9b78:	e0bffc17 	ldw	r2,-16(fp)
    9b7c:	00000706 	br	9b9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9b80:	e0bffc17 	ldw	r2,-16(fp)
    9b84:	10800017 	ldw	r2,0(r2)
    9b88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9b8c:	e0fffc17 	ldw	r3,-16(fp)
    9b90:	e0bfff17 	ldw	r2,-4(fp)
    9b94:	18bff01e 	bne	r3,r2,9b58 <_gp+0xffff7708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9b98:	0005883a 	mov	r2,zero
}
    9b9c:	e037883a 	mov	sp,fp
    9ba0:	dfc00117 	ldw	ra,4(sp)
    9ba4:	df000017 	ldw	fp,0(sp)
    9ba8:	dec00204 	addi	sp,sp,8
    9bac:	f800283a 	ret

00009bb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9bb0:	defffb04 	addi	sp,sp,-20
    9bb4:	dfc00415 	stw	ra,16(sp)
    9bb8:	df000315 	stw	fp,12(sp)
    9bbc:	df000304 	addi	fp,sp,12
    9bc0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9bc4:	00800074 	movhi	r2,1
    9bc8:	10a91704 	addi	r2,r2,-23460
    9bcc:	10800017 	ldw	r2,0(r2)
    9bd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9bd4:	00003106 	br	9c9c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9bd8:	e0bffd17 	ldw	r2,-12(fp)
    9bdc:	10800217 	ldw	r2,8(r2)
    9be0:	1009883a 	mov	r4,r2
    9be4:	00085580 	call	8558 <strlen>
    9be8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9bec:	e0bffd17 	ldw	r2,-12(fp)
    9bf0:	10c00217 	ldw	r3,8(r2)
    9bf4:	e0bffe17 	ldw	r2,-8(fp)
    9bf8:	10bfffc4 	addi	r2,r2,-1
    9bfc:	1885883a 	add	r2,r3,r2
    9c00:	10800003 	ldbu	r2,0(r2)
    9c04:	10803fcc 	andi	r2,r2,255
    9c08:	1080201c 	xori	r2,r2,128
    9c0c:	10bfe004 	addi	r2,r2,-128
    9c10:	10800bd8 	cmpnei	r2,r2,47
    9c14:	1000031e 	bne	r2,zero,9c24 <alt_find_file+0x74>
    {
      len -= 1;
    9c18:	e0bffe17 	ldw	r2,-8(fp)
    9c1c:	10bfffc4 	addi	r2,r2,-1
    9c20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c24:	e0bffe17 	ldw	r2,-8(fp)
    9c28:	e0ffff17 	ldw	r3,-4(fp)
    9c2c:	1885883a 	add	r2,r3,r2
    9c30:	10800003 	ldbu	r2,0(r2)
    9c34:	10803fcc 	andi	r2,r2,255
    9c38:	1080201c 	xori	r2,r2,128
    9c3c:	10bfe004 	addi	r2,r2,-128
    9c40:	10800be0 	cmpeqi	r2,r2,47
    9c44:	1000081e 	bne	r2,zero,9c68 <alt_find_file+0xb8>
    9c48:	e0bffe17 	ldw	r2,-8(fp)
    9c4c:	e0ffff17 	ldw	r3,-4(fp)
    9c50:	1885883a 	add	r2,r3,r2
    9c54:	10800003 	ldbu	r2,0(r2)
    9c58:	10803fcc 	andi	r2,r2,255
    9c5c:	1080201c 	xori	r2,r2,128
    9c60:	10bfe004 	addi	r2,r2,-128
    9c64:	10000a1e 	bne	r2,zero,9c90 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9c68:	e0bffd17 	ldw	r2,-12(fp)
    9c6c:	10c00217 	ldw	r3,8(r2)
    9c70:	e0bffe17 	ldw	r2,-8(fp)
    9c74:	1809883a 	mov	r4,r3
    9c78:	e17fff17 	ldw	r5,-4(fp)
    9c7c:	100d883a 	mov	r6,r2
    9c80:	0009dcc0 	call	9dcc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c84:	1000021e 	bne	r2,zero,9c90 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9c88:	e0bffd17 	ldw	r2,-12(fp)
    9c8c:	00000806 	br	9cb0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9c90:	e0bffd17 	ldw	r2,-12(fp)
    9c94:	10800017 	ldw	r2,0(r2)
    9c98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9c9c:	e0fffd17 	ldw	r3,-12(fp)
    9ca0:	00800074 	movhi	r2,1
    9ca4:	10a91704 	addi	r2,r2,-23460
    9ca8:	18bfcb1e 	bne	r3,r2,9bd8 <_gp+0xffff7788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9cac:	0005883a 	mov	r2,zero
}
    9cb0:	e037883a 	mov	sp,fp
    9cb4:	dfc00117 	ldw	ra,4(sp)
    9cb8:	df000017 	ldw	fp,0(sp)
    9cbc:	dec00204 	addi	sp,sp,8
    9cc0:	f800283a 	ret

00009cc4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9cc4:	defffa04 	addi	sp,sp,-24
    9cc8:	dfc00515 	stw	ra,20(sp)
    9ccc:	df000415 	stw	fp,16(sp)
    9cd0:	dc000315 	stw	r16,12(sp)
    9cd4:	df000404 	addi	fp,sp,16
    9cd8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9cdc:	00bffa04 	movi	r2,-24
    9ce0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9ce4:	e03ffc15 	stw	zero,-16(fp)
    9ce8:	00002106 	br	9d70 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9cec:	04000074 	movhi	r16,1
    9cf0:	8428b404 	addi	r16,r16,-23856
    9cf4:	e0bffc17 	ldw	r2,-16(fp)
    9cf8:	1009883a 	mov	r4,r2
    9cfc:	01400304 	movi	r5,12
    9d00:	00084140 	call	8414 <__mulsi3>
    9d04:	8085883a 	add	r2,r16,r2
    9d08:	10800017 	ldw	r2,0(r2)
    9d0c:	1000151e 	bne	r2,zero,9d64 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9d10:	04000074 	movhi	r16,1
    9d14:	8428b404 	addi	r16,r16,-23856
    9d18:	e0bffc17 	ldw	r2,-16(fp)
    9d1c:	1009883a 	mov	r4,r2
    9d20:	01400304 	movi	r5,12
    9d24:	00084140 	call	8414 <__mulsi3>
    9d28:	8085883a 	add	r2,r16,r2
    9d2c:	e0fffe17 	ldw	r3,-8(fp)
    9d30:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9d34:	00800074 	movhi	r2,1
    9d38:	10a91b04 	addi	r2,r2,-23444
    9d3c:	10c00017 	ldw	r3,0(r2)
    9d40:	e0bffc17 	ldw	r2,-16(fp)
    9d44:	1880040e 	bge	r3,r2,9d58 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9d48:	00800074 	movhi	r2,1
    9d4c:	10a91b04 	addi	r2,r2,-23444
    9d50:	e0fffc17 	ldw	r3,-16(fp)
    9d54:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9d58:	e0bffc17 	ldw	r2,-16(fp)
    9d5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9d60:	00000606 	br	9d7c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9d64:	e0bffc17 	ldw	r2,-16(fp)
    9d68:	10800044 	addi	r2,r2,1
    9d6c:	e0bffc15 	stw	r2,-16(fp)
    9d70:	e0bffc17 	ldw	r2,-16(fp)
    9d74:	10800810 	cmplti	r2,r2,32
    9d78:	103fdc1e 	bne	r2,zero,9cec <_gp+0xffff789c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9d7c:	e0bffd17 	ldw	r2,-12(fp)
}
    9d80:	e6ffff04 	addi	sp,fp,-4
    9d84:	dfc00217 	ldw	ra,8(sp)
    9d88:	df000117 	ldw	fp,4(sp)
    9d8c:	dc000017 	ldw	r16,0(sp)
    9d90:	dec00304 	addi	sp,sp,12
    9d94:	f800283a 	ret

00009d98 <atexit>:
    9d98:	200b883a 	mov	r5,r4
    9d9c:	000d883a 	mov	r6,zero
    9da0:	0009883a 	mov	r4,zero
    9da4:	000f883a 	mov	r7,zero
    9da8:	0009dfc1 	jmpi	9dfc <__register_exitproc>

00009dac <exit>:
    9dac:	defffe04 	addi	sp,sp,-8
    9db0:	000b883a 	mov	r5,zero
    9db4:	dc000015 	stw	r16,0(sp)
    9db8:	dfc00115 	stw	ra,4(sp)
    9dbc:	2021883a 	mov	r16,r4
    9dc0:	0009f400 	call	9f40 <__call_exitprocs>
    9dc4:	8009883a 	mov	r4,r16
    9dc8:	000a0dc0 	call	a0dc <_exit>

00009dcc <memcmp>:
    9dcc:	218d883a 	add	r6,r4,r6
    9dd0:	21800826 	beq	r4,r6,9df4 <memcmp+0x28>
    9dd4:	20800003 	ldbu	r2,0(r4)
    9dd8:	28c00003 	ldbu	r3,0(r5)
    9ddc:	10c00226 	beq	r2,r3,9de8 <memcmp+0x1c>
    9de0:	10c5c83a 	sub	r2,r2,r3
    9de4:	f800283a 	ret
    9de8:	21000044 	addi	r4,r4,1
    9dec:	29400044 	addi	r5,r5,1
    9df0:	003ff706 	br	9dd0 <_gp+0xffff7980>
    9df4:	0005883a 	mov	r2,zero
    9df8:	f800283a 	ret

00009dfc <__register_exitproc>:
    9dfc:	00800074 	movhi	r2,1
    9e00:	defff904 	addi	sp,sp,-28
    9e04:	10a91504 	addi	r2,r2,-23468
    9e08:	dd400515 	stw	r21,20(sp)
    9e0c:	15400017 	ldw	r21,0(r2)
    9e10:	dc000015 	stw	r16,0(sp)
    9e14:	dd000415 	stw	r20,16(sp)
    9e18:	ac000c17 	ldw	r16,48(r21)
    9e1c:	dcc00315 	stw	r19,12(sp)
    9e20:	dc800215 	stw	r18,8(sp)
    9e24:	dc400115 	stw	r17,4(sp)
    9e28:	dfc00615 	stw	ra,24(sp)
    9e2c:	2025883a 	mov	r18,r4
    9e30:	2823883a 	mov	r17,r5
    9e34:	3029883a 	mov	r20,r6
    9e38:	3827883a 	mov	r19,r7
    9e3c:	8000021e 	bne	r16,zero,9e48 <__register_exitproc+0x4c>
    9e40:	ac000d04 	addi	r16,r21,52
    9e44:	ac000c15 	stw	r16,48(r21)
    9e48:	80800117 	ldw	r2,4(r16)
    9e4c:	00c007c4 	movi	r3,31
    9e50:	18800d0e 	bge	r3,r2,9e88 <__register_exitproc+0x8c>
    9e54:	00800034 	movhi	r2,0
    9e58:	10800004 	addi	r2,r2,0
    9e5c:	1000021e 	bne	r2,zero,9e68 <__register_exitproc+0x6c>
    9e60:	00bfffc4 	movi	r2,-1
    9e64:	00002d06 	br	9f1c <__register_exitproc+0x120>
    9e68:	01002304 	movi	r4,140
    9e6c:	00000000 	call	0 <__reset-0x8000>
    9e70:	1021883a 	mov	r16,r2
    9e74:	103ffa26 	beq	r2,zero,9e60 <_gp+0xffff7a10>
    9e78:	10000115 	stw	zero,4(r2)
    9e7c:	a8800c17 	ldw	r2,48(r21)
    9e80:	80800015 	stw	r2,0(r16)
    9e84:	ac000c15 	stw	r16,48(r21)
    9e88:	90001b26 	beq	r18,zero,9ef8 <__register_exitproc+0xfc>
    9e8c:	80802217 	ldw	r2,136(r16)
    9e90:	1000091e 	bne	r2,zero,9eb8 <__register_exitproc+0xbc>
    9e94:	00800034 	movhi	r2,0
    9e98:	10800004 	addi	r2,r2,0
    9e9c:	103ff026 	beq	r2,zero,9e60 <_gp+0xffff7a10>
    9ea0:	01004204 	movi	r4,264
    9ea4:	00000000 	call	0 <__reset-0x8000>
    9ea8:	103fed26 	beq	r2,zero,9e60 <_gp+0xffff7a10>
    9eac:	10004015 	stw	zero,256(r2)
    9eb0:	10004115 	stw	zero,260(r2)
    9eb4:	80802215 	stw	r2,136(r16)
    9eb8:	81400117 	ldw	r5,4(r16)
    9ebc:	01000044 	movi	r4,1
    9ec0:	2947883a 	add	r3,r5,r5
    9ec4:	18c7883a 	add	r3,r3,r3
    9ec8:	10c7883a 	add	r3,r2,r3
    9ecc:	1d000015 	stw	r20,0(r3)
    9ed0:	214a983a 	sll	r5,r4,r5
    9ed4:	11004017 	ldw	r4,256(r2)
    9ed8:	2148b03a 	or	r4,r4,r5
    9edc:	11004015 	stw	r4,256(r2)
    9ee0:	1cc02015 	stw	r19,128(r3)
    9ee4:	00c00084 	movi	r3,2
    9ee8:	90c0031e 	bne	r18,r3,9ef8 <__register_exitproc+0xfc>
    9eec:	10c04117 	ldw	r3,260(r2)
    9ef0:	194ab03a 	or	r5,r3,r5
    9ef4:	11404115 	stw	r5,260(r2)
    9ef8:	80800117 	ldw	r2,4(r16)
    9efc:	10c00044 	addi	r3,r2,1
    9f00:	10800084 	addi	r2,r2,2
    9f04:	1085883a 	add	r2,r2,r2
    9f08:	1085883a 	add	r2,r2,r2
    9f0c:	80c00115 	stw	r3,4(r16)
    9f10:	80a1883a 	add	r16,r16,r2
    9f14:	84400015 	stw	r17,0(r16)
    9f18:	0005883a 	mov	r2,zero
    9f1c:	dfc00617 	ldw	ra,24(sp)
    9f20:	dd400517 	ldw	r21,20(sp)
    9f24:	dd000417 	ldw	r20,16(sp)
    9f28:	dcc00317 	ldw	r19,12(sp)
    9f2c:	dc800217 	ldw	r18,8(sp)
    9f30:	dc400117 	ldw	r17,4(sp)
    9f34:	dc000017 	ldw	r16,0(sp)
    9f38:	dec00704 	addi	sp,sp,28
    9f3c:	f800283a 	ret

00009f40 <__call_exitprocs>:
    9f40:	00800074 	movhi	r2,1
    9f44:	10a91504 	addi	r2,r2,-23468
    9f48:	10800017 	ldw	r2,0(r2)
    9f4c:	defff304 	addi	sp,sp,-52
    9f50:	ddc00a15 	stw	r23,40(sp)
    9f54:	d8800015 	stw	r2,0(sp)
    9f58:	05c00034 	movhi	r23,0
    9f5c:	10800c04 	addi	r2,r2,48
    9f60:	dc800515 	stw	r18,20(sp)
    9f64:	dfc00c15 	stw	ra,48(sp)
    9f68:	df000b15 	stw	fp,44(sp)
    9f6c:	dd800915 	stw	r22,36(sp)
    9f70:	dd400815 	stw	r21,32(sp)
    9f74:	dd000715 	stw	r20,28(sp)
    9f78:	dcc00615 	stw	r19,24(sp)
    9f7c:	dc400415 	stw	r17,16(sp)
    9f80:	dc000315 	stw	r16,12(sp)
    9f84:	d9000115 	stw	r4,4(sp)
    9f88:	2825883a 	mov	r18,r5
    9f8c:	d8800215 	stw	r2,8(sp)
    9f90:	bdc00004 	addi	r23,r23,0
    9f94:	d8800017 	ldw	r2,0(sp)
    9f98:	dc400217 	ldw	r17,8(sp)
    9f9c:	14c00c17 	ldw	r19,48(r2)
    9fa0:	98004226 	beq	r19,zero,a0ac <__call_exitprocs+0x16c>
    9fa4:	9c000117 	ldw	r16,4(r19)
    9fa8:	00900034 	movhi	r2,16384
    9fac:	10bfffc4 	addi	r2,r2,-1
    9fb0:	9d002217 	ldw	r20,136(r19)
    9fb4:	857fffc4 	addi	r21,r16,-1
    9fb8:	80a1883a 	add	r16,r16,r2
    9fbc:	8421883a 	add	r16,r16,r16
    9fc0:	8421883a 	add	r16,r16,r16
    9fc4:	a42d883a 	add	r22,r20,r16
    9fc8:	84000204 	addi	r16,r16,8
    9fcc:	9c21883a 	add	r16,r19,r16
    9fd0:	a8002616 	blt	r21,zero,a06c <__call_exitprocs+0x12c>
    9fd4:	90000326 	beq	r18,zero,9fe4 <__call_exitprocs+0xa4>
    9fd8:	a0002026 	beq	r20,zero,a05c <__call_exitprocs+0x11c>
    9fdc:	b1002017 	ldw	r4,128(r22)
    9fe0:	24801e1e 	bne	r4,r18,a05c <__call_exitprocs+0x11c>
    9fe4:	99000117 	ldw	r4,4(r19)
    9fe8:	82000017 	ldw	r8,0(r16)
    9fec:	213fffc4 	addi	r4,r4,-1
    9ff0:	a900021e 	bne	r21,r4,9ffc <__call_exitprocs+0xbc>
    9ff4:	9d400115 	stw	r21,4(r19)
    9ff8:	00000106 	br	a000 <__call_exitprocs+0xc0>
    9ffc:	80000015 	stw	zero,0(r16)
    a000:	40001626 	beq	r8,zero,a05c <__call_exitprocs+0x11c>
    a004:	9f000117 	ldw	fp,4(r19)
    a008:	a0000526 	beq	r20,zero,a020 <__call_exitprocs+0xe0>
    a00c:	00800044 	movi	r2,1
    a010:	1552983a 	sll	r9,r2,r21
    a014:	a1404017 	ldw	r5,256(r20)
    a018:	494a703a 	and	r5,r9,r5
    a01c:	2800021e 	bne	r5,zero,a028 <__call_exitprocs+0xe8>
    a020:	403ee83a 	callr	r8
    a024:	00000906 	br	a04c <__call_exitprocs+0x10c>
    a028:	a1004117 	ldw	r4,260(r20)
    a02c:	4908703a 	and	r4,r9,r4
    a030:	2000041e 	bne	r4,zero,a044 <__call_exitprocs+0x104>
    a034:	d9000117 	ldw	r4,4(sp)
    a038:	b1400017 	ldw	r5,0(r22)
    a03c:	403ee83a 	callr	r8
    a040:	00000206 	br	a04c <__call_exitprocs+0x10c>
    a044:	b1000017 	ldw	r4,0(r22)
    a048:	403ee83a 	callr	r8
    a04c:	99000117 	ldw	r4,4(r19)
    a050:	e13fd01e 	bne	fp,r4,9f94 <_gp+0xffff7b44>
    a054:	89000017 	ldw	r4,0(r17)
    a058:	24ffce1e 	bne	r4,r19,9f94 <_gp+0xffff7b44>
    a05c:	ad7fffc4 	addi	r21,r21,-1
    a060:	b5bfff04 	addi	r22,r22,-4
    a064:	843fff04 	addi	r16,r16,-4
    a068:	003fd906 	br	9fd0 <_gp+0xffff7b80>
    a06c:	b8000f26 	beq	r23,zero,a0ac <__call_exitprocs+0x16c>
    a070:	99000117 	ldw	r4,4(r19)
    a074:	20000a1e 	bne	r4,zero,a0a0 <__call_exitprocs+0x160>
    a078:	99000017 	ldw	r4,0(r19)
    a07c:	20000826 	beq	r4,zero,a0a0 <__call_exitprocs+0x160>
    a080:	89000015 	stw	r4,0(r17)
    a084:	a0000226 	beq	r20,zero,a090 <__call_exitprocs+0x150>
    a088:	a009883a 	mov	r4,r20
    a08c:	00000000 	call	0 <__reset-0x8000>
    a090:	9809883a 	mov	r4,r19
    a094:	00000000 	call	0 <__reset-0x8000>
    a098:	8cc00017 	ldw	r19,0(r17)
    a09c:	003fc006 	br	9fa0 <_gp+0xffff7b50>
    a0a0:	9823883a 	mov	r17,r19
    a0a4:	9cc00017 	ldw	r19,0(r19)
    a0a8:	003fbd06 	br	9fa0 <_gp+0xffff7b50>
    a0ac:	dfc00c17 	ldw	ra,48(sp)
    a0b0:	df000b17 	ldw	fp,44(sp)
    a0b4:	ddc00a17 	ldw	r23,40(sp)
    a0b8:	dd800917 	ldw	r22,36(sp)
    a0bc:	dd400817 	ldw	r21,32(sp)
    a0c0:	dd000717 	ldw	r20,28(sp)
    a0c4:	dcc00617 	ldw	r19,24(sp)
    a0c8:	dc800517 	ldw	r18,20(sp)
    a0cc:	dc400417 	ldw	r17,16(sp)
    a0d0:	dc000317 	ldw	r16,12(sp)
    a0d4:	dec00d04 	addi	sp,sp,52
    a0d8:	f800283a 	ret

0000a0dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a0dc:	defffd04 	addi	sp,sp,-12
    a0e0:	df000215 	stw	fp,8(sp)
    a0e4:	df000204 	addi	fp,sp,8
    a0e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a0ec:	0001883a 	nop
    a0f0:	e0bfff17 	ldw	r2,-4(fp)
    a0f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a0f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a0fc:	10000226 	beq	r2,zero,a108 <_exit+0x2c>
    ALT_SIM_FAIL();
    a100:	002af070 	cmpltui	zero,zero,43969
    a104:	00000106 	br	a10c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a108:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a10c:	003fff06 	br	a10c <_gp+0xffff7cbc>
